options = Dict{Symbol,Any}(
    :mode => :train,
    :minFreq => 2,
    :lowercase => true,
    :vocabSize => 2^16,
    :wordSize => 16,
    :shapeSize => 4,
    :posSize => 8,
    :hiddenSize => 32,
    :maxSequenceLength => 40,
    :batchSize => 32,
    :numEpochs => 40,
    :trainCorpus => string(pwd(), "/dat/dep/vie/vi_vtb-ud-train.conllu"),
    :validCorpus => string(pwd(), "/dat/dep/vie/vi_vtb-ud-dev.conllu"),
    :testCorpus => string(pwd(), "/dat/dep/vie/vi_vtb-ud-test.conllu"),
    :modelPath => string(pwd(), "/jul/seq/dat/vie/encoder.bson"),
    :wordPath => string(pwd(), "/jul/seq/dat/vie/words.txt"),
    :shapePath => string(pwd(), "/jul/seq/dat/vie/shapes.txt"),
    :posPath => string(pwd(), "/jul/seq/dat/vie/partOfSpeech.txt"),
    :labelPath => string(pwd(), "/jul/seq/dat/vie/label.txt"),
    :numCores => 4,
    :verbose => false,
    :logPath => string(pwd(), "/jul/seq/dat/vie/loss.txt"),
    :unknown => "[UNK]",
    :paddingX => "[PAD_X]",
    :paddingY => "[PAD_Y]"
)

optionsEWT = Dict{Symbol,Any}(
    :mode => :train,
    :minFreq => 2,
    :lowercase => true,
    :vocabSize => 2^16,
    :wordSize => 16,
    :shapeSize => 4,
    :posSize => 8,
    :hiddenSize => 32,
    :maxSequenceLength => 40,
    :batchSize => 32,
    :numEpochs => 40,
    :trainCorpus => string(pwd(), "/dat/dep/eng/2.7/en_ewt-ud-train.conllu"),
    :validCorpus => string(pwd(), "/dat/dep/eng/2.7/en_ewt-ud-dev.conllu"),
    :testCorpus => string(pwd(), "/dat/dep/eng/2.7/en_ewt-ud-test.conllu"),
    :modelPath => string(pwd(), "/jul/seq/dat/eng/encoder.bson"),
    :wordPath => string(pwd(), "/jul/seq/dat/eng/words.txt"),
    :shapePath => string(pwd(), "/jul/seq/dat/eng/shapes.txt"),
    :posPath => string(pwd(), "/jul/seq/dat/eng/partOfSpeech.txt"),
    :labelPath => string(pwd(), "/jul/seq/dat/eng/label.txt"),
    :numCores => 4,
    :verbose => false,
    :logPath => string(pwd(), "/jul/seq/dat/eng/loss.txt"),
    :unknown => "[UNK]",
    :paddingX => "[PAD_X]",
    :paddingY => "[PAD_Y]"
)