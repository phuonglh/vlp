// This file was generated automatically by the Snowball to Java compiler
// http://snowballstem.org/

package org.tartarus.snowball.ext;

import org.tartarus.snowball.Among;

 /**
  * This class was automatically generated by a Snowball to Java compiler
  * It implements the stemming algorithm defined by a snowball script.
  */

public class greekStemmer extends org.tartarus.snowball.SnowballStemmer {

    private static final long serialVersionUID = 1L;

    private final static Among a_0[] = {
        new Among ( "\u0386", -1, 38 ),
        new Among ( "\u0388", -1, 39 ),
        new Among ( "\u0389", -1, 40 ),
        new Among ( "\u038A", -1, 41 ),
        new Among ( "\u038C", -1, 42 ),
        new Among ( "\u038E", -1, 43 ),
        new Among ( "\u038F", -1, 44 ),
        new Among ( "\u0390", -1, 34 ),
        new Among ( "\u0391", -1, 1 ),
        new Among ( "\u0392", -1, 2 ),
        new Among ( "\u0393", -1, 3 ),
        new Among ( "\u0394", -1, 4 ),
        new Among ( "\u0395", -1, 5 ),
        new Among ( "\u0396", -1, 6 ),
        new Among ( "\u0397", -1, 7 ),
        new Among ( "\u0398", -1, 8 ),
        new Among ( "\u0399", -1, 9 ),
        new Among ( "\u039A", -1, 10 ),
        new Among ( "\u039B", -1, 11 ),
        new Among ( "\u039C", -1, 12 ),
        new Among ( "\u039D", -1, 13 ),
        new Among ( "\u039E", -1, 14 ),
        new Among ( "\u039F", -1, 15 ),
        new Among ( "\u03A0", -1, 16 ),
        new Among ( "\u03A1", -1, 17 ),
        new Among ( "\u03A3", -1, 18 ),
        new Among ( "\u03A4", -1, 19 ),
        new Among ( "\u03A5", -1, 20 ),
        new Among ( "\u03A6", -1, 21 ),
        new Among ( "\u03A7", -1, 22 ),
        new Among ( "\u03A8", -1, 23 ),
        new Among ( "\u03A9", -1, 24 ),
        new Among ( "\u03AA", -1, 25 ),
        new Among ( "\u03AB", -1, 26 ),
        new Among ( "\u03AC", -1, 27 ),
        new Among ( "\u03AD", -1, 28 ),
        new Among ( "\u03AE", -1, 29 ),
        new Among ( "\u03AF", -1, 30 ),
        new Among ( "\u03B0", -1, 35 ),
        new Among ( "\u03CA", -1, 36 ),
        new Among ( "\u03CB", -1, 37 ),
        new Among ( "\u03CC", -1, 31 ),
        new Among ( "\u03CD", -1, 32 ),
        new Among ( "\u03CE", -1, 33 )
    };

    private final static Among a_1[] = {
        new Among ( "\u03C3\u03BA\u03B1\u03B3\u03B9\u03B1", -1, 2 ),
        new Among ( "\u03C6\u03B1\u03B3\u03B9\u03B1", -1, 1 ),
        new Among ( "\u03BF\u03BB\u03BF\u03B3\u03B9\u03B1", -1, 3 ),
        new Among ( "\u03C3\u03BF\u03B3\u03B9\u03B1", -1, 4 ),
        new Among ( "\u03C4\u03B1\u03C4\u03BF\u03B3\u03B9\u03B1", -1, 5 ),
        new Among ( "\u03BA\u03C1\u03B5\u03B1\u03C4\u03B1", -1, 6 ),
        new Among ( "\u03C0\u03B5\u03C1\u03B1\u03C4\u03B1", -1, 7 ),
        new Among ( "\u03C4\u03B5\u03C1\u03B1\u03C4\u03B1", -1, 8 ),
        new Among ( "\u03B3\u03B5\u03B3\u03BF\u03BD\u03BF\u03C4\u03B1", -1, 11 ),
        new Among ( "\u03BA\u03B1\u03B8\u03B5\u03C3\u03C4\u03C9\u03C4\u03B1", -1, 10 ),
        new Among ( "\u03C6\u03C9\u03C4\u03B1", -1, 9 ),
        new Among ( "\u03C3\u03BA\u03B1\u03B3\u03B9\u03C9\u03BD", -1, 2 ),
        new Among ( "\u03C6\u03B1\u03B3\u03B9\u03C9\u03BD", -1, 1 ),
        new Among ( "\u03BF\u03BB\u03BF\u03B3\u03B9\u03C9\u03BD", -1, 3 ),
        new Among ( "\u03C3\u03BF\u03B3\u03B9\u03C9\u03BD", -1, 4 ),
        new Among ( "\u03C4\u03B1\u03C4\u03BF\u03B3\u03B9\u03C9\u03BD", -1, 5 ),
        new Among ( "\u03BA\u03C1\u03B5\u03B1\u03C4\u03C9\u03BD", -1, 6 ),
        new Among ( "\u03C0\u03B5\u03C1\u03B1\u03C4\u03C9\u03BD", -1, 7 ),
        new Among ( "\u03C4\u03B5\u03C1\u03B1\u03C4\u03C9\u03BD", -1, 8 ),
        new Among ( "\u03B3\u03B5\u03B3\u03BF\u03BD\u03BF\u03C4\u03C9\u03BD", -1, 11 ),
        new Among ( "\u03BA\u03B1\u03B8\u03B5\u03C3\u03C4\u03C9\u03C4\u03C9\u03BD", -1, 10 ),
        new Among ( "\u03C6\u03C9\u03C4\u03C9\u03BD", -1, 9 ),
        new Among ( "\u03BA\u03C1\u03B5\u03B1\u03C3", -1, 6 ),
        new Among ( "\u03C0\u03B5\u03C1\u03B1\u03C3", -1, 7 ),
        new Among ( "\u03C4\u03B5\u03C1\u03B1\u03C3", -1, 8 ),
        new Among ( "\u03B3\u03B5\u03B3\u03BF\u03BD\u03BF\u03C3", -1, 11 ),
        new Among ( "\u03BA\u03C1\u03B5\u03B1\u03C4\u03BF\u03C3", -1, 6 ),
        new Among ( "\u03C0\u03B5\u03C1\u03B1\u03C4\u03BF\u03C3", -1, 7 ),
        new Among ( "\u03C4\u03B5\u03C1\u03B1\u03C4\u03BF\u03C3", -1, 8 ),
        new Among ( "\u03B3\u03B5\u03B3\u03BF\u03BD\u03BF\u03C4\u03BF\u03C3", -1, 11 ),
        new Among ( "\u03BA\u03B1\u03B8\u03B5\u03C3\u03C4\u03C9\u03C4\u03BF\u03C3", -1, 10 ),
        new Among ( "\u03C6\u03C9\u03C4\u03BF\u03C3", -1, 9 ),
        new Among ( "\u03BA\u03B1\u03B8\u03B5\u03C3\u03C4\u03C9\u03C3", -1, 10 ),
        new Among ( "\u03C6\u03C9\u03C3", -1, 9 ),
        new Among ( "\u03C3\u03BA\u03B1\u03B3\u03B9\u03BF\u03C5", -1, 2 ),
        new Among ( "\u03C6\u03B1\u03B3\u03B9\u03BF\u03C5", -1, 1 ),
        new Among ( "\u03BF\u03BB\u03BF\u03B3\u03B9\u03BF\u03C5", -1, 3 ),
        new Among ( "\u03C3\u03BF\u03B3\u03B9\u03BF\u03C5", -1, 4 ),
        new Among ( "\u03C4\u03B1\u03C4\u03BF\u03B3\u03B9\u03BF\u03C5", -1, 5 )
    };

    private final static Among a_2[] = {
        new Among ( "\u03B1\u03B4\u03C9\u03BD", -1, 1 ),
        new Among ( "\u03B1\u03B4\u03B5\u03C3", -1, 1 )
    };

    private final static Among a_3[] = {
        new Among ( "\u03B3\u03B9\u03B1\u03B3\u03B9", -1, -1 ),
        new Among ( "\u03B8\u03B5\u03B9", -1, -1 ),
        new Among ( "\u03BF\u03BA", -1, -1 ),
        new Among ( "\u03BC\u03B1\u03BC", -1, -1 ),
        new Among ( "\u03BC\u03B1\u03BD", -1, -1 ),
        new Among ( "\u03BC\u03C0\u03B1\u03BC\u03C0", -1, -1 ),
        new Among ( "\u03C0\u03B5\u03B8\u03B5\u03C1", -1, -1 ),
        new Among ( "\u03C0\u03B1\u03C4\u03B5\u03C1", -1, -1 ),
        new Among ( "\u03BA\u03C5\u03C1", -1, -1 ),
        new Among ( "\u03BD\u03C4\u03B1\u03BD\u03C4", -1, -1 )
    };

    private final static Among a_4[] = {
        new Among ( "\u03B5\u03B4\u03C9\u03BD", -1, 1 ),
        new Among ( "\u03B5\u03B4\u03B5\u03C3", -1, 1 )
    };

    private final static Among a_5[] = {
        new Among ( "\u03BC\u03B9\u03BB", -1, 1 ),
        new Among ( "\u03B4\u03B1\u03C0", -1, 1 ),
        new Among ( "\u03B3\u03B7\u03C0", -1, 1 ),
        new Among ( "\u03B9\u03C0", -1, 1 ),
        new Among ( "\u03B5\u03BC\u03C0", -1, 1 ),
        new Among ( "\u03BF\u03C0", -1, 1 ),
        new Among ( "\u03BA\u03C1\u03B1\u03C3\u03C0", -1, 1 ),
        new Among ( "\u03C5\u03C0", -1, 1 )
    };

    private final static Among a_6[] = {
        new Among ( "\u03BF\u03C5\u03B4\u03C9\u03BD", -1, 1 ),
        new Among ( "\u03BF\u03C5\u03B4\u03B5\u03C3", -1, 1 )
    };

    private final static Among a_7[] = {
        new Among ( "\u03C4\u03C1\u03B1\u03B3", -1, 1 ),
        new Among ( "\u03C6\u03B5", -1, 1 ),
        new Among ( "\u03BA\u03B1\u03BB\u03B9\u03B1\u03BA", -1, 1 ),
        new Among ( "\u03B1\u03C1\u03BA", -1, 1 ),
        new Among ( "\u03C3\u03BA", -1, 1 ),
        new Among ( "\u03C0\u03B5\u03C4\u03B1\u03BB", -1, 1 ),
        new Among ( "\u03B2\u03B5\u03BB", -1, 1 ),
        new Among ( "\u03BB\u03BF\u03C5\u03BB", -1, 1 ),
        new Among ( "\u03C6\u03BB", -1, 1 ),
        new Among ( "\u03C7\u03BD", -1, 1 ),
        new Among ( "\u03C0\u03BB\u03B5\u03BE", -1, 1 ),
        new Among ( "\u03C3\u03C0", -1, 1 ),
        new Among ( "\u03C6\u03C1", -1, 1 ),
        new Among ( "\u03C3", -1, 1 ),
        new Among ( "\u03BB\u03B9\u03C7", -1, 1 )
    };

    private final static Among a_8[] = {
        new Among ( "\u03B5\u03C9\u03BD", -1, 1 ),
        new Among ( "\u03B5\u03C9\u03C3", -1, 1 )
    };

    private final static Among a_9[] = {
        new Among ( "\u03B4", -1, 1 ),
        new Among ( "\u03B9\u03B4", 0, 1 ),
        new Among ( "\u03B8", -1, 1 ),
        new Among ( "\u03B3\u03B1\u03BB", -1, 1 ),
        new Among ( "\u03B5\u03BB", -1, 1 ),
        new Among ( "\u03BD", -1, 1 ),
        new Among ( "\u03C0", -1, 1 ),
        new Among ( "\u03C0\u03B1\u03C1", -1, 1 )
    };

    private final static Among a_10[] = {
        new Among ( "\u03B9\u03B1", -1, 1 ),
        new Among ( "\u03B9\u03C9\u03BD", -1, 1 ),
        new Among ( "\u03B9\u03BF\u03C5", -1, 1 )
    };

    private final static Among a_11[] = {
        new Among ( "\u03B9\u03BA\u03B1", -1, 1 ),
        new Among ( "\u03B9\u03BA\u03C9\u03BD", -1, 1 ),
        new Among ( "\u03B9\u03BA\u03BF", -1, 1 ),
        new Among ( "\u03B9\u03BA\u03BF\u03C5", -1, 1 )
    };

    private final static Among a_12[] = {
        new Among ( "\u03B1\u03B4", -1, 1 ),
        new Among ( "\u03C3\u03C5\u03BD\u03B1\u03B4", 0, 1 ),
        new Among ( "\u03BA\u03B1\u03C4\u03B1\u03B4", 0, 1 ),
        new Among ( "\u03B1\u03BD\u03C4\u03B9\u03B4", -1, 1 ),
        new Among ( "\u03B5\u03BD\u03B4", -1, 1 ),
        new Among ( "\u03C6\u03C5\u03BB\u03BF\u03B4", -1, 1 ),
        new Among ( "\u03C5\u03C0\u03BF\u03B4", -1, 1 ),
        new Among ( "\u03C0\u03C1\u03C9\u03C4\u03BF\u03B4", -1, 1 ),
        new Among ( "\u03B5\u03BE\u03C9\u03B4", -1, 1 ),
        new Among ( "\u03B7\u03B8", -1, 1 ),
        new Among ( "\u03B1\u03BD\u03B7\u03B8", 9, 1 ),
        new Among ( "\u03BE\u03B9\u03BA", -1, 1 ),
        new Among ( "\u03B1\u03BB", -1, 1 ),
        new Among ( "\u03B1\u03BC\u03BC\u03BF\u03C7\u03B1\u03BB", 12, 1 ),
        new Among ( "\u03C3\u03C5\u03BD\u03BF\u03BC\u03B7\u03BB", -1, 1 ),
        new Among ( "\u03BC\u03C0\u03BF\u03BB", -1, 1 ),
        new Among ( "\u03BC\u03BF\u03C5\u03BB", -1, 1 ),
        new Among ( "\u03C4\u03C3\u03B1\u03BC", -1, 1 ),
        new Among ( "\u03B2\u03C1\u03C9\u03BC", -1, 1 ),
        new Among ( "\u03B1\u03BC\u03B1\u03BD", -1, 1 ),
        new Among ( "\u03BC\u03C0\u03B1\u03BD", -1, 1 ),
        new Among ( "\u03BA\u03B1\u03BB\u03BB\u03B9\u03BD", -1, 1 ),
        new Among ( "\u03C0\u03BF\u03C3\u03C4\u03B5\u03BB\u03BD", -1, 1 ),
        new Among ( "\u03C6\u03B9\u03BB\u03BF\u03BD", -1, 1 ),
        new Among ( "\u03BA\u03B1\u03BB\u03C0", -1, 1 ),
        new Among ( "\u03B3\u03B5\u03C1", -1, 1 ),
        new Among ( "\u03C7\u03B1\u03C3", -1, 1 ),
        new Among ( "\u03BC\u03C0\u03BF\u03C3", -1, 1 ),
        new Among ( "\u03C0\u03BB\u03B9\u03B1\u03C4\u03C3", -1, 1 ),
        new Among ( "\u03C0\u03B5\u03C4\u03C3", -1, 1 ),
        new Among ( "\u03C0\u03B9\u03C4\u03C3", -1, 1 ),
        new Among ( "\u03C6\u03C5\u03C3", -1, 1 ),
        new Among ( "\u03BC\u03C0\u03B1\u03B3\u03B9\u03B1\u03C4", -1, 1 ),
        new Among ( "\u03BD\u03B9\u03C4", -1, 1 ),
        new Among ( "\u03C0\u03B9\u03BA\u03B1\u03BD\u03C4", -1, 1 ),
        new Among ( "\u03C3\u03B5\u03C1\u03C4", -1, 1 )
    };

    private final static Among a_13[] = {
        new Among ( "\u03B1\u03B3\u03B1\u03BC\u03B5", -1, 1 ),
        new Among ( "\u03B7\u03BA\u03B1\u03BC\u03B5", -1, 1 ),
        new Among ( "\u03B7\u03B8\u03B7\u03BA\u03B1\u03BC\u03B5", 1, 1 ),
        new Among ( "\u03B7\u03C3\u03B1\u03BC\u03B5", -1, 1 ),
        new Among ( "\u03BF\u03C5\u03C3\u03B1\u03BC\u03B5", -1, 1 )
    };

    private final static Among a_14[] = {
        new Among ( "\u03B2\u03BF\u03C5\u03B2", -1, 1 ),
        new Among ( "\u03BE\u03B5\u03B8", -1, 1 ),
        new Among ( "\u03C0\u03B5\u03B8", -1, 1 ),
        new Among ( "\u03B1\u03C0\u03BF\u03B8", -1, 1 ),
        new Among ( "\u03B1\u03C0\u03BF\u03BA", -1, 1 ),
        new Among ( "\u03BF\u03C5\u03BB", -1, 1 ),
        new Among ( "\u03B1\u03BD\u03B1\u03C0", -1, 1 ),
        new Among ( "\u03C0\u03B9\u03BA\u03C1", -1, 1 ),
        new Among ( "\u03C0\u03BF\u03C4", -1, 1 ),
        new Among ( "\u03B1\u03C0\u03BF\u03C3\u03C4", -1, 1 ),
        new Among ( "\u03C7", -1, 1 ),
        new Among ( "\u03C3\u03B9\u03C7", 10, 1 )
    };

    private final static Among a_15[] = {
        new Among ( "\u03C4\u03C1", -1, 1 ),
        new Among ( "\u03C4\u03C3", -1, 1 )
    };

    private final static Among a_16[] = {
        new Among ( "\u03B1\u03B3\u03B1\u03BD\u03B5", -1, 1 ),
        new Among ( "\u03B7\u03BA\u03B1\u03BD\u03B5", -1, 1 ),
        new Among ( "\u03B7\u03B8\u03B7\u03BA\u03B1\u03BD\u03B5", 1, 1 ),
        new Among ( "\u03B7\u03C3\u03B1\u03BD\u03B5", -1, 1 ),
        new Among ( "\u03BF\u03C5\u03C3\u03B1\u03BD\u03B5", -1, 1 ),
        new Among ( "\u03BF\u03BD\u03C4\u03B1\u03BD\u03B5", -1, 1 ),
        new Among ( "\u03B9\u03BF\u03BD\u03C4\u03B1\u03BD\u03B5", 5, 1 ),
        new Among ( "\u03BF\u03C5\u03BD\u03C4\u03B1\u03BD\u03B5", -1, 1 ),
        new Among ( "\u03B9\u03BF\u03C5\u03BD\u03C4\u03B1\u03BD\u03B5", 7, 1 ),
        new Among ( "\u03BF\u03C4\u03B1\u03BD\u03B5", -1, 1 ),
        new Among ( "\u03B9\u03BF\u03C4\u03B1\u03BD\u03B5", 9, 1 )
    };

    private final static Among a_17[] = {
        new Among ( "\u03C4\u03B1\u03B2", -1, 1 ),
        new Among ( "\u03BD\u03C4\u03B1\u03B2", 0, 1 ),
        new Among ( "\u03C8\u03B7\u03BB\u03BF\u03C4\u03B1\u03B2", 0, 1 ),
        new Among ( "\u03BB\u03B9\u03B2", -1, 1 ),
        new Among ( "\u03BA\u03BB\u03B9\u03B2", 3, 1 ),
        new Among ( "\u03BE\u03B7\u03C1\u03BF\u03BA\u03BB\u03B9\u03B2", 4, 1 ),
        new Among ( "\u03B3", -1, 1 ),
        new Among ( "\u03B1\u03B3", 6, 1 ),
        new Among ( "\u03C4\u03C1\u03B1\u03B3", 7, 1 ),
        new Among ( "\u03C4\u03C3\u03B1\u03B3", 7, 1 ),
        new Among ( "\u03B1\u03B8\u03B9\u03B3\u03B3", 6, 1 ),
        new Among ( "\u03C4\u03C3\u03B9\u03B3\u03B3", 6, 1 ),
        new Among ( "\u03B1\u03C4\u03C3\u03B9\u03B3\u03B3", 11, 1 ),
        new Among ( "\u03C3\u03C4\u03B5\u03B3", 6, 1 ),
        new Among ( "\u03B1\u03C0\u03B7\u03B3", 6, 1 ),
        new Among ( "\u03C3\u03B9\u03B3", 6, 1 ),
        new Among ( "\u03B1\u03BD\u03BF\u03C1\u03B3", 6, 1 ),
        new Among ( "\u03B5\u03BD\u03BF\u03C1\u03B3", 6, 1 ),
        new Among ( "\u03BA\u03B1\u03BB\u03C0\u03BF\u03C5\u03B6", -1, 1 ),
        new Among ( "\u03B8", -1, 1 ),
        new Among ( "\u03BC\u03C9\u03B1\u03BC\u03B5\u03B8", 19, 1 ),
        new Among ( "\u03C0\u03B9\u03B8", 19, 1 ),
        new Among ( "\u03B1\u03C0\u03B9\u03B8", 21, 1 ),
        new Among ( "\u03B4\u03B5\u03BA", -1, 1 ),
        new Among ( "\u03C0\u03B5\u03BB\u03B5\u03BA", -1, 1 ),
        new Among ( "\u03B9\u03BA", -1, 1 ),
        new Among ( "\u03B1\u03BD\u03B9\u03BA", 25, 1 ),
        new Among ( "\u03B2\u03BF\u03C5\u03BB\u03BA", -1, 1 ),
        new Among ( "\u03B2\u03B1\u03C3\u03BA", -1, 1 ),
        new Among ( "\u03B2\u03C1\u03B1\u03C7\u03C5\u03BA", -1, 1 ),
        new Among ( "\u03B3\u03B1\u03BB", -1, 1 ),
        new Among ( "\u03BA\u03B1\u03C4\u03B1\u03B3\u03B1\u03BB", 30, 1 ),
        new Among ( "\u03BF\u03BB\u03BF\u03B3\u03B1\u03BB", 30, 1 ),
        new Among ( "\u03B2\u03B1\u03B8\u03C5\u03B3\u03B1\u03BB", 30, 1 ),
        new Among ( "\u03BC\u03B5\u03BB", -1, 1 ),
        new Among ( "\u03BA\u03B1\u03C3\u03C4\u03B5\u03BB", -1, 1 ),
        new Among ( "\u03C0\u03BF\u03C1\u03C4\u03BF\u03BB", -1, 1 ),
        new Among ( "\u03C0\u03BB", -1, 1 ),
        new Among ( "\u03B4\u03B9\u03C0\u03BB", 37, 1 ),
        new Among ( "\u03BB\u03B1\u03BF\u03C0\u03BB", 37, 1 ),
        new Among ( "\u03C8\u03C5\u03C7\u03BF\u03C0\u03BB", 37, 1 ),
        new Among ( "\u03BF\u03C5\u03BB", -1, 1 ),
        new Among ( "\u03BC", -1, 1 ),
        new Among ( "\u03BF\u03BB\u03B9\u03B3\u03BF\u03B4\u03B1\u03BC", 42, 1 ),
        new Among ( "\u03BC\u03BF\u03C5\u03C3\u03BF\u03C5\u03BB\u03BC", 42, 1 ),
        new Among ( "\u03B4\u03C1\u03B1\u03B4\u03BF\u03C5\u03BC", 42, 1 ),
        new Among ( "\u03B2\u03C1\u03B1\u03C7\u03BC", 42, 1 ),
        new Among ( "\u03BD", -1, 1 ),
        new Among ( "\u03B1\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD", 47, 1 ),
        new Among ( "\u03C0", -1, 1 ),
        new Among ( "\u03B1\u03B4\u03B1\u03C0", 49, 1 ),
        new Among ( "\u03C7\u03B1\u03BC\u03B7\u03BB\u03BF\u03B4\u03B1\u03C0", 49, 1 ),
        new Among ( "\u03C0\u03BF\u03BB\u03C5\u03B4\u03B1\u03C0", 49, 1 ),
        new Among ( "\u03BA\u03BF\u03C0", 49, 1 ),
        new Among ( "\u03C5\u03C0\u03BF\u03BA\u03BF\u03C0", 53, 1 ),
        new Among ( "\u03C4\u03C3\u03BF\u03C0", 49, 1 ),
        new Among ( "\u03C3\u03C0", 49, 1 ),
        new Among ( "\u03B5\u03C1", -1, 1 ),
        new Among ( "\u03B3\u03B5\u03C1", 57, 1 ),
        new Among ( "\u03B2\u03B5\u03C4\u03B5\u03C1", 57, 1 ),
        new Among ( "\u03BB\u03BF\u03C5\u03B8\u03B7\u03C1", -1, 1 ),
        new Among ( "\u03BA\u03BF\u03C1\u03BC\u03BF\u03C1", -1, 1 ),
        new Among ( "\u03C0\u03B5\u03C1\u03B9\u03C4\u03C1", -1, 1 ),
        new Among ( "\u03BF\u03C5\u03C1", -1, 1 ),
        new Among ( "\u03C3", -1, 1 ),
        new Among ( "\u03B2\u03B1\u03C3", 64, 1 ),
        new Among ( "\u03C0\u03BF\u03BB\u03B9\u03C3", 64, 1 ),
        new Among ( "\u03C3\u03B1\u03C1\u03B1\u03BA\u03B1\u03C4\u03C3", 64, 1 ),
        new Among ( "\u03B8\u03C5\u03C3", 64, 1 ),
        new Among ( "\u03B4\u03B9\u03B1\u03C4", -1, 1 ),
        new Among ( "\u03C0\u03BB\u03B1\u03C4", -1, 1 ),
        new Among ( "\u03C4\u03C3\u03B1\u03C1\u03BB\u03B1\u03C4", -1, 1 ),
        new Among ( "\u03C4\u03B5\u03C4", -1, 1 ),
        new Among ( "\u03C0\u03BF\u03C5\u03C1\u03B9\u03C4", -1, 1 ),
        new Among ( "\u03C3\u03BF\u03C5\u03BB\u03C4", -1, 1 ),
        new Among ( "\u03BC\u03B1\u03B9\u03BD\u03C4", -1, 1 ),
        new Among ( "\u03B6\u03C9\u03BD\u03C4", -1, 1 ),
        new Among ( "\u03BA\u03B1\u03C3\u03C4", -1, 1 ),
        new Among ( "\u03C6", -1, 1 ),
        new Among ( "\u03B4\u03B9\u03B1\u03C6", 78, 1 ),
        new Among ( "\u03C3\u03C4\u03B5\u03C6", 78, 1 ),
        new Among ( "\u03C6\u03C9\u03C4\u03BF\u03C3\u03C4\u03B5\u03C6", 80, 1 ),
        new Among ( "\u03C0\u03B5\u03C1\u03B7\u03C6", 78, 1 ),
        new Among ( "\u03C5\u03C0\u03B5\u03C1\u03B7\u03C6", 82, 1 ),
        new Among ( "\u03BA\u03BF\u03B9\u03BB\u03B1\u03C1\u03C6", 78, 1 ),
        new Among ( "\u03C0\u03B5\u03BD\u03C4\u03B1\u03C1\u03C6", 78, 1 ),
        new Among ( "\u03BF\u03C1\u03C6", 78, 1 ),
        new Among ( "\u03C7", -1, 1 ),
        new Among ( "\u03B1\u03BC\u03B7\u03C7", 87, 1 ),
        new Among ( "\u03B2\u03B9\u03BF\u03BC\u03B7\u03C7", 87, 1 ),
        new Among ( "\u03BC\u03B5\u03B3\u03BB\u03BF\u03B2\u03B9\u03BF\u03BC\u03B7\u03C7", 89, 1 ),
        new Among ( "\u03BA\u03B1\u03C0\u03BD\u03BF\u03B2\u03B9\u03BF\u03BC\u03B7\u03C7", 89, 1 ),
        new Among ( "\u03BC\u03B9\u03BA\u03C1\u03BF\u03B2\u03B9\u03BF\u03BC\u03B7\u03C7", 89, 1 ),
        new Among ( "\u03C0\u03BF\u03BB\u03C5\u03BC\u03B7\u03C7", 87, 1 ),
        new Among ( "\u03BB\u03B9\u03C7", 87, 1 )
    };

    private final static Among a_18[] = {
        new Among ( "\u03B7\u03C3\u03B5\u03C4\u03B5", -1, 1 )
    };

    private final static Among a_19[] = {
        new Among ( "\u03B5\u03BD\u03B4", -1, 1 ),
        new Among ( "\u03C3\u03C5\u03BD\u03B4", -1, 1 ),
        new Among ( "\u03BF\u03B4", -1, 1 ),
        new Among ( "\u03B4\u03B9\u03B1\u03B8", -1, 1 ),
        new Among ( "\u03BA\u03B1\u03B8", -1, 1 ),
        new Among ( "\u03C1\u03B1\u03B8", -1, 1 ),
        new Among ( "\u03C4\u03B1\u03B8", -1, 1 ),
        new Among ( "\u03C4\u03B9\u03B8", -1, 1 ),
        new Among ( "\u03B5\u03BA\u03B8", -1, 1 ),
        new Among ( "\u03B5\u03BD\u03B8", -1, 1 ),
        new Among ( "\u03C3\u03C5\u03BD\u03B8", -1, 1 ),
        new Among ( "\u03C1\u03BF\u03B8", -1, 1 ),
        new Among ( "\u03C5\u03C0\u03B5\u03C1\u03B8", -1, 1 ),
        new Among ( "\u03C3\u03B8", -1, 1 ),
        new Among ( "\u03B5\u03C5\u03B8", -1, 1 ),
        new Among ( "\u03B1\u03C1\u03BA", -1, 1 ),
        new Among ( "\u03C9\u03C6\u03B5\u03BB", -1, 1 ),
        new Among ( "\u03B2\u03BF\u03BB", -1, 1 ),
        new Among ( "\u03B1\u03B9\u03BD", -1, 1 ),
        new Among ( "\u03C0\u03BF\u03BD", -1, 1 ),
        new Among ( "\u03C1\u03BF\u03BD", -1, 1 ),
        new Among ( "\u03C3\u03C5\u03BD", -1, 1 ),
        new Among ( "\u03B2\u03B1\u03C1", -1, 1 ),
        new Among ( "\u03B2\u03C1", -1, 1 ),
        new Among ( "\u03B1\u03B9\u03C1", -1, 1 ),
        new Among ( "\u03C6\u03BF\u03C1", -1, 1 ),
        new Among ( "\u03B5\u03C5\u03C1", -1, 1 ),
        new Among ( "\u03C0\u03C5\u03C1", -1, 1 ),
        new Among ( "\u03C7\u03C9\u03C1", -1, 1 ),
        new Among ( "\u03BD\u03B5\u03C4", -1, 1 ),
        new Among ( "\u03C3\u03C7", -1, 1 )
    };

    private final static Among a_20[] = {
        new Among ( "\u03C0\u03B1\u03B3", -1, 1 ),
        new Among ( "\u03B4", -1, 1 ),
        new Among ( "\u03B1\u03B4", 1, 1 ),
        new Among ( "\u03B8", -1, 1 ),
        new Among ( "\u03B1\u03B8", 3, 1 ),
        new Among ( "\u03C4\u03BF\u03BA", -1, 1 ),
        new Among ( "\u03C3\u03BA", -1, 1 ),
        new Among ( "\u03C0\u03B1\u03C1\u03B1\u03BA\u03B1\u03BB", -1, 1 ),
        new Among ( "\u03C3\u03BA\u03B5\u03BB", -1, 1 ),
        new Among ( "\u03B1\u03C0\u03BB", -1, 1 ),
        new Among ( "\u03B5\u03BC", -1, 1 ),
        new Among ( "\u03B1\u03BD", -1, 1 ),
        new Among ( "\u03B2\u03B5\u03BD", -1, 1 ),
        new Among ( "\u03B2\u03B1\u03C1\u03BF\u03BD", -1, 1 ),
        new Among ( "\u03BA\u03BF\u03C0", -1, 1 ),
        new Among ( "\u03C3\u03B5\u03C1\u03C0", -1, 1 ),
        new Among ( "\u03B1\u03B2\u03B1\u03C1", -1, 1 ),
        new Among ( "\u03B5\u03BD\u03B1\u03C1", -1, 1 ),
        new Among ( "\u03B1\u03B2\u03C1", -1, 1 ),
        new Among ( "\u03BC\u03C0\u03BF\u03C1", -1, 1 ),
        new Among ( "\u03B8\u03B1\u03C1\u03C1", -1, 1 ),
        new Among ( "\u03BD\u03C4\u03C1", -1, 1 ),
        new Among ( "\u03C5", -1, 1 ),
        new Among ( "\u03BD\u03B9\u03C6", -1, 1 ),
        new Among ( "\u03C3\u03C5\u03C1\u03C6", -1, 1 )
    };

    private final static Among a_21[] = {
        new Among ( "\u03BF\u03BD\u03C4\u03B1\u03C3", -1, 1 ),
        new Among ( "\u03C9\u03BD\u03C4\u03B1\u03C3", -1, 1 )
    };

    private final static Among a_22[] = {
        new Among ( "\u03BF\u03BC\u03B1\u03C3\u03C4\u03B5", -1, 1 ),
        new Among ( "\u03B9\u03BF\u03BC\u03B1\u03C3\u03C4\u03B5", 0, 1 )
    };

    private final static Among a_23[] = {
        new Among ( "\u03C0", -1, 1 ),
        new Among ( "\u03B1\u03C0", 0, 1 ),
        new Among ( "\u03B1\u03BA\u03B1\u03C4\u03B1\u03C0", 1, 1 ),
        new Among ( "\u03C3\u03C5\u03BC\u03C0", 0, 1 ),
        new Among ( "\u03B1\u03C3\u03C5\u03BC\u03C0", 3, 1 ),
        new Among ( "\u03B1\u03BC\u03B5\u03C4\u03B1\u03BC\u03C6", -1, 1 )
    };

    private final static Among a_24[] = {
        new Among ( "\u03B6", -1, 1 ),
        new Among ( "\u03B1\u03BB", -1, 1 ),
        new Among ( "\u03C0\u03B1\u03C1\u03B1\u03BA\u03B1\u03BB", 1, 1 ),
        new Among ( "\u03B5\u03BA\u03C4\u03B5\u03BB", -1, 1 ),
        new Among ( "\u03BC", -1, 1 ),
        new Among ( "\u03BE", -1, 1 ),
        new Among ( "\u03C0\u03C1\u03BF", -1, 1 ),
        new Among ( "\u03B1\u03C1", -1, 1 ),
        new Among ( "\u03BD\u03B9\u03C3", -1, 1 )
    };

    private final static Among a_25[] = {
        new Among ( "\u03B7\u03B8\u03B7\u03BA\u03B1", -1, 1 ),
        new Among ( "\u03B7\u03B8\u03B7\u03BA\u03B5", -1, 1 ),
        new Among ( "\u03B7\u03B8\u03B7\u03BA\u03B5\u03C3", -1, 1 )
    };

    private final static Among a_26[] = {
        new Among ( "\u03C0\u03B9\u03B8", -1, 1 ),
        new Among ( "\u03BF\u03B8", -1, 1 ),
        new Among ( "\u03BD\u03B1\u03C1\u03B8", -1, 1 ),
        new Among ( "\u03C3\u03BA\u03BF\u03C5\u03BB", -1, 1 ),
        new Among ( "\u03C3\u03BA\u03C9\u03BB", -1, 1 ),
        new Among ( "\u03C3\u03C6", -1, 1 )
    };

    private final static Among a_27[] = {
        new Among ( "\u03B8", -1, 1 ),
        new Among ( "\u03B4\u03B9\u03B1\u03B8", 0, 1 ),
        new Among ( "\u03C0\u03B1\u03C1\u03B1\u03BA\u03B1\u03C4\u03B1\u03B8", 0, 1 ),
        new Among ( "\u03C3\u03C5\u03BD\u03B8", 0, 1 ),
        new Among ( "\u03C0\u03C1\u03BF\u03C3\u03B8", 0, 1 )
    };

    private final static Among a_28[] = {
        new Among ( "\u03B7\u03BA\u03B1", -1, 1 ),
        new Among ( "\u03B7\u03BA\u03B5", -1, 1 ),
        new Among ( "\u03B7\u03BA\u03B5\u03C3", -1, 1 )
    };

    private final static Among a_29[] = {
        new Among ( "\u03C6\u03B1\u03B3", -1, 1 ),
        new Among ( "\u03BB\u03B7\u03B3", -1, 1 ),
        new Among ( "\u03C6\u03C1\u03C5\u03B4", -1, 1 ),
        new Among ( "\u03BC\u03B1\u03BD\u03C4\u03B9\u03BB", -1, 1 ),
        new Among ( "\u03BC\u03B1\u03BB\u03BB", -1, 1 ),
        new Among ( "\u03BF\u03BC", -1, 1 ),
        new Among ( "\u03B2\u03BB\u03B5\u03C0", -1, 1 ),
        new Among ( "\u03C0\u03BF\u03B4\u03B1\u03C1", -1, 1 ),
        new Among ( "\u03BA\u03C5\u03BC\u03B1\u03C4", -1, 1 ),
        new Among ( "\u03C0\u03C1\u03C9\u03C4", -1, 1 ),
        new Among ( "\u03BB\u03B1\u03C7", -1, 1 ),
        new Among ( "\u03C0\u03B1\u03BD\u03C4\u03B1\u03C7", -1, 1 )
    };

    private final static Among a_30[] = {
        new Among ( "\u03C4\u03C3\u03B1", -1, 1 ),
        new Among ( "\u03C7\u03B1\u03B4", -1, 1 ),
        new Among ( "\u03BC\u03B5\u03B4", -1, 1 ),
        new Among ( "\u03BB\u03B1\u03BC\u03C0\u03B9\u03B4", -1, 1 ),
        new Among ( "\u03B4\u03B5", -1, 1 ),
        new Among ( "\u03C0\u03BB\u03B5", -1, 1 ),
        new Among ( "\u03BC\u03B5\u03C3\u03B1\u03B6", -1, 1 ),
        new Among ( "\u03B4\u03B5\u03C3\u03C0\u03BF\u03B6", -1, 1 ),
        new Among ( "\u03B1\u03B9\u03B8", -1, 1 ),
        new Among ( "\u03C6\u03B1\u03C1\u03BC\u03B1\u03BA", -1, 1 ),
        new Among ( "\u03B1\u03B3\u03BA", -1, 1 ),
        new Among ( "\u03B1\u03BD\u03B7\u03BA", -1, 1 ),
        new Among ( "\u03BB", -1, 1 ),
        new Among ( "\u03BC", -1, 1 ),
        new Among ( "\u03B1\u03BC", 13, 1 ),
        new Among ( "\u03B2\u03C1\u03BF\u03BC", 13, 1 ),
        new Among ( "\u03C5\u03C0\u03BF\u03C4\u03B5\u03B9\u03BD", -1, 1 ),
        new Among ( "\u03B5\u03BA\u03BB\u03B9\u03C0", -1, 1 ),
        new Among ( "\u03C1", -1, 1 ),
        new Among ( "\u03B5\u03BD\u03B4\u03B9\u03B1\u03C6\u03B5\u03C1", 18, 1 ),
        new Among ( "\u03B1\u03BD\u03B1\u03C1\u03C1", 18, 1 ),
        new Among ( "\u03C0\u03B1\u03C4", -1, 1 ),
        new Among ( "\u03BA\u03B1\u03B8\u03B1\u03C1\u03B5\u03C5", -1, 1 ),
        new Among ( "\u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03B5\u03C5", -1, 1 ),
        new Among ( "\u03BB\u03B5\u03C7", -1, 1 )
    };

    private final static Among a_31[] = {
        new Among ( "\u03BF\u03C5\u03C3\u03B1", -1, 1 ),
        new Among ( "\u03BF\u03C5\u03C3\u03B5", -1, 1 ),
        new Among ( "\u03BF\u03C5\u03C3\u03B5\u03C3", -1, 1 )
    };

    private final static Among a_32[] = {
        new Among ( "\u03C8\u03BF\u03C6", -1, -1 ),
        new Among ( "\u03BD\u03B1\u03C5\u03BB\u03BF\u03C7", -1, -1 )
    };

    private final static Among a_33[] = {
        new Among ( "\u03C0\u03B5\u03BB", -1, 1 ),
        new Among ( "\u03BB\u03BB", -1, 1 ),
        new Among ( "\u03C3\u03BC\u03B7\u03BD", -1, 1 ),
        new Among ( "\u03C1\u03C0", -1, 1 ),
        new Among ( "\u03C0\u03C1", -1, 1 ),
        new Among ( "\u03C6\u03C1", -1, 1 ),
        new Among ( "\u03C7\u03BF\u03C1\u03C4", -1, 1 ),
        new Among ( "\u03BF\u03C6", -1, 1 ),
        new Among ( "\u03C3\u03C6", -1, 1 ),
        new Among ( "\u03BB\u03BF\u03C7", -1, 1 )
    };

    private final static Among a_34[] = {
        new Among ( "\u03B1\u03BC\u03B1\u03BB\u03BB\u03B9", -1, 1 ),
        new Among ( "\u03BB", -1, 1 ),
        new Among ( "\u03B1\u03BC\u03B1\u03BB", 1, 1 ),
        new Among ( "\u03BC", -1, 1 ),
        new Among ( "\u03BF\u03C5\u03BB\u03B1\u03BC", 3, 1 ),
        new Among ( "\u03B5\u03BD", -1, 1 ),
        new Among ( "\u03B4\u03B5\u03C1\u03B2\u03B5\u03BD", 5, 1 ),
        new Among ( "\u03C0", -1, 1 ),
        new Among ( "\u03B1\u03B5\u03B9\u03C0", 7, 1 ),
        new Among ( "\u03B1\u03C1\u03C4\u03B9\u03C0", 7, 1 ),
        new Among ( "\u03C3\u03C5\u03BC\u03C0", 7, 1 ),
        new Among ( "\u03BD\u03B5\u03BF\u03C0", 7, 1 ),
        new Among ( "\u03BA\u03C1\u03BF\u03BA\u03B1\u03BB\u03BF\u03C0", 7, 1 ),
        new Among ( "\u03BF\u03BB\u03BF\u03C0", 7, 1 ),
        new Among ( "\u03C0\u03C1\u03BF\u03C3\u03C9\u03C0\u03BF\u03C0", 7, 1 ),
        new Among ( "\u03C3\u03B9\u03B4\u03B7\u03C1\u03BF\u03C0", 7, 1 ),
        new Among ( "\u03B4\u03C1\u03BF\u03C3\u03BF\u03C0", 7, 1 ),
        new Among ( "\u03B1\u03C3\u03C0", 7, 1 ),
        new Among ( "\u03B1\u03BD\u03C5\u03C0", 7, 1 ),
        new Among ( "\u03C1", -1, 1 ),
        new Among ( "\u03B1\u03C3\u03C0\u03B1\u03C1", 19, 1 ),
        new Among ( "\u03C7\u03B1\u03C1", 19, 1 ),
        new Among ( "\u03B1\u03C7\u03B1\u03C1", 21, 1 ),
        new Among ( "\u03B1\u03C0\u03B5\u03C1", 19, 1 ),
        new Among ( "\u03C4\u03C1", 19, 1 ),
        new Among ( "\u03BF\u03C5\u03C1", 19, 1 ),
        new Among ( "\u03C4", -1, 1 ),
        new Among ( "\u03B4\u03B9\u03B1\u03C4", 26, 1 ),
        new Among ( "\u03B5\u03C0\u03B9\u03C4", 26, 1 ),
        new Among ( "\u03C3\u03C5\u03BD\u03C4", 26, 1 ),
        new Among ( "\u03BF\u03BC\u03BF\u03C4", 26, 1 ),
        new Among ( "\u03BD\u03BF\u03BC\u03BF\u03C4", 30, 1 ),
        new Among ( "\u03B1\u03C0\u03BF\u03C4", 26, 1 ),
        new Among ( "\u03C5\u03C0\u03BF\u03C4", 26, 1 ),
        new Among ( "\u03B1\u03B2\u03B1\u03C3\u03C4", 26, 1 ),
        new Among ( "\u03B1\u03B9\u03BC\u03BF\u03C3\u03C4", 26, 1 ),
        new Among ( "\u03C0\u03C1\u03BF\u03C3\u03C4", 26, 1 ),
        new Among ( "\u03B1\u03BD\u03C5\u03C3\u03C4", 26, 1 ),
        new Among ( "\u03BD\u03B1\u03C5", -1, 1 ),
        new Among ( "\u03B1\u03C6", -1, 1 ),
        new Among ( "\u03BE\u03B5\u03C6", -1, 1 ),
        new Among ( "\u03B1\u03B4\u03B7\u03C6", -1, 1 ),
        new Among ( "\u03C0\u03B1\u03BC\u03C6", -1, 1 ),
        new Among ( "\u03C0\u03BF\u03BB\u03C5\u03C6", -1, 1 )
    };

    private final static Among a_35[] = {
        new Among ( "\u03B1\u03B3\u03B1", -1, 1 ),
        new Among ( "\u03B1\u03B3\u03B5", -1, 1 ),
        new Among ( "\u03B1\u03B3\u03B5\u03C3", -1, 1 )
    };

    private final static Among a_36[] = {
        new Among ( "\u03B7\u03C3\u03B1", -1, 1 ),
        new Among ( "\u03B7\u03C3\u03B5", -1, 1 ),
        new Among ( "\u03B7\u03C3\u03BF\u03C5", -1, 1 )
    };

    private final static Among a_37[] = {
        new Among ( "\u03BD", -1, 1 ),
        new Among ( "\u03B4\u03C9\u03B4\u03B5\u03BA\u03B1\u03BD", 0, 1 ),
        new Among ( "\u03B5\u03C0\u03C4\u03B1\u03BD", 0, 1 ),
        new Among ( "\u03BC\u03B5\u03B3\u03B1\u03BB\u03BF\u03BD", 0, 1 ),
        new Among ( "\u03B5\u03C1\u03B7\u03BC\u03BF\u03BD", 0, 1 ),
        new Among ( "\u03C7\u03B5\u03C1\u03C3\u03BF\u03BD", 0, 1 )
    };

    private final static Among a_38[] = {
        new Among ( "\u03B7\u03C3\u03C4\u03B5", -1, 1 )
    };

    private final static Among a_39[] = {
        new Among ( "\u03C3\u03B2", -1, 1 ),
        new Among ( "\u03B1\u03C3\u03B2", 0, 1 ),
        new Among ( "\u03B1\u03C0\u03BB", -1, 1 ),
        new Among ( "\u03B1\u03B5\u03B9\u03BC\u03BD", -1, 1 ),
        new Among ( "\u03C7\u03C1", -1, 1 ),
        new Among ( "\u03B1\u03C7\u03C1", 4, 1 ),
        new Among ( "\u03BA\u03BF\u03B9\u03BD\u03BF\u03C7\u03C1", 4, 1 ),
        new Among ( "\u03B4\u03C5\u03C3\u03C7\u03C1", 4, 1 ),
        new Among ( "\u03B5\u03C5\u03C7\u03C1", 4, 1 ),
        new Among ( "\u03C0\u03B1\u03BB\u03B9\u03BC\u03C8", -1, 1 )
    };

    private final static Among a_40[] = {
        new Among ( "\u03BF\u03C5\u03BD\u03B5", -1, 1 ),
        new Among ( "\u03B7\u03B8\u03BF\u03C5\u03BD\u03B5", 0, 1 ),
        new Among ( "\u03B7\u03C3\u03BF\u03C5\u03BD\u03B5", 0, 1 )
    };

    private final static Among a_41[] = {
        new Among ( "\u03C3\u03C0\u03B9", -1, 1 ),
        new Among ( "\u03BD", -1, 1 ),
        new Among ( "\u03B5\u03BE\u03C9\u03BD", 1, 1 ),
        new Among ( "\u03C1", -1, 1 ),
        new Among ( "\u03C3\u03C4\u03C1\u03B1\u03B2\u03BF\u03BC\u03BF\u03C5\u03C4\u03C3", -1, 1 ),
        new Among ( "\u03BA\u03B1\u03BA\u03BF\u03BC\u03BF\u03C5\u03C4\u03C3", -1, 1 )
    };

    private final static Among a_42[] = {
        new Among ( "\u03BF\u03C5\u03BC\u03B5", -1, 1 ),
        new Among ( "\u03B7\u03B8\u03BF\u03C5\u03BC\u03B5", 0, 1 ),
        new Among ( "\u03B7\u03C3\u03BF\u03C5\u03BC\u03B5", 0, 1 )
    };

    private final static Among a_43[] = {
        new Among ( "\u03B1\u03B6", -1, 1 ),
        new Among ( "\u03C9\u03C1\u03B9\u03BF\u03C0\u03BB", -1, 1 ),
        new Among ( "\u03B1\u03C3\u03BF\u03C5\u03C3", -1, 1 ),
        new Among ( "\u03C0\u03B1\u03C1\u03B1\u03C3\u03BF\u03C5\u03C3", 2, 1 ),
        new Among ( "\u03B1\u03BB\u03BB\u03BF\u03C3\u03BF\u03C5\u03C3", -1, 1 ),
        new Among ( "\u03C6", -1, 1 ),
        new Among ( "\u03C7", -1, 1 )
    };

    private final static Among a_44[] = {
        new Among ( "\u03BC\u03B1\u03C4\u03B1", -1, 1 ),
        new Among ( "\u03BC\u03B1\u03C4\u03C9\u03BD", -1, 1 ),
        new Among ( "\u03BC\u03B1\u03C4\u03BF\u03C3", -1, 1 )
    };

    private final static Among a_45[] = {
        new Among ( "\u03B1", -1, 1 ),
        new Among ( "\u03B9\u03BF\u03C5\u03BC\u03B1", 0, 1 ),
        new Among ( "\u03BF\u03BC\u03BF\u03C5\u03BD\u03B1", 0, 1 ),
        new Among ( "\u03B9\u03BF\u03BC\u03BF\u03C5\u03BD\u03B1", 2, 1 ),
        new Among ( "\u03BF\u03C3\u03BF\u03C5\u03BD\u03B1", 0, 1 ),
        new Among ( "\u03B9\u03BF\u03C3\u03BF\u03C5\u03BD\u03B1", 4, 1 ),
        new Among ( "\u03B5", -1, 1 ),
        new Among ( "\u03B1\u03B3\u03B1\u03C4\u03B5", 6, 1 ),
        new Among ( "\u03B7\u03BA\u03B1\u03C4\u03B5", 6, 1 ),
        new Among ( "\u03B7\u03B8\u03B7\u03BA\u03B1\u03C4\u03B5", 8, 1 ),
        new Among ( "\u03B7\u03C3\u03B1\u03C4\u03B5", 6, 1 ),
        new Among ( "\u03BF\u03C5\u03C3\u03B1\u03C4\u03B5", 6, 1 ),
        new Among ( "\u03B5\u03B9\u03C4\u03B5", 6, 1 ),
        new Among ( "\u03B7\u03B8\u03B5\u03B9\u03C4\u03B5", 12, 1 ),
        new Among ( "\u03B9\u03B5\u03BC\u03B1\u03C3\u03C4\u03B5", 6, 1 ),
        new Among ( "\u03BF\u03C5\u03BC\u03B1\u03C3\u03C4\u03B5", 6, 1 ),
        new Among ( "\u03B9\u03BF\u03C5\u03BC\u03B1\u03C3\u03C4\u03B5", 15, 1 ),
        new Among ( "\u03B9\u03B5\u03C3\u03B1\u03C3\u03C4\u03B5", 6, 1 ),
        new Among ( "\u03BF\u03C3\u03B1\u03C3\u03C4\u03B5", 6, 1 ),
        new Among ( "\u03B9\u03BF\u03C3\u03B1\u03C3\u03C4\u03B5", 18, 1 ),
        new Among ( "\u03B7", -1, 1 ),
        new Among ( "\u03B9", -1, 1 ),
        new Among ( "\u03B1\u03BC\u03B1\u03B9", 21, 1 ),
        new Among ( "\u03B9\u03B5\u03BC\u03B1\u03B9", 21, 1 ),
        new Among ( "\u03BF\u03BC\u03B1\u03B9", 21, 1 ),
        new Among ( "\u03BF\u03C5\u03BC\u03B1\u03B9", 21, 1 ),
        new Among ( "\u03B1\u03C3\u03B1\u03B9", 21, 1 ),
        new Among ( "\u03B5\u03C3\u03B1\u03B9", 21, 1 ),
        new Among ( "\u03B9\u03B5\u03C3\u03B1\u03B9", 27, 1 ),
        new Among ( "\u03B1\u03C4\u03B1\u03B9", 21, 1 ),
        new Among ( "\u03B5\u03C4\u03B1\u03B9", 21, 1 ),
        new Among ( "\u03B9\u03B5\u03C4\u03B1\u03B9", 30, 1 ),
        new Among ( "\u03BF\u03BD\u03C4\u03B1\u03B9", 21, 1 ),
        new Among ( "\u03BF\u03C5\u03BD\u03C4\u03B1\u03B9", 21, 1 ),
        new Among ( "\u03B9\u03BF\u03C5\u03BD\u03C4\u03B1\u03B9", 33, 1 ),
        new Among ( "\u03B5\u03B9", 21, 1 ),
        new Among ( "\u03B1\u03B5\u03B9", 35, 1 ),
        new Among ( "\u03B7\u03B8\u03B5\u03B9", 35, 1 ),
        new Among ( "\u03B7\u03C3\u03B5\u03B9", 35, 1 ),
        new Among ( "\u03BF\u03B9", 21, 1 ),
        new Among ( "\u03B1\u03BD", -1, 1 ),
        new Among ( "\u03B1\u03B3\u03B1\u03BD", 40, 1 ),
        new Among ( "\u03B7\u03BA\u03B1\u03BD", 40, 1 ),
        new Among ( "\u03B7\u03B8\u03B7\u03BA\u03B1\u03BD", 42, 1 ),
        new Among ( "\u03B7\u03C3\u03B1\u03BD", 40, 1 ),
        new Among ( "\u03BF\u03C5\u03C3\u03B1\u03BD", 40, 1 ),
        new Among ( "\u03BF\u03BD\u03C4\u03BF\u03C5\u03C3\u03B1\u03BD", 45, 1 ),
        new Among ( "\u03B9\u03BF\u03BD\u03C4\u03BF\u03C5\u03C3\u03B1\u03BD", 46, 1 ),
        new Among ( "\u03BF\u03BD\u03C4\u03B1\u03BD", 40, 1 ),
        new Among ( "\u03B9\u03BF\u03BD\u03C4\u03B1\u03BD", 48, 1 ),
        new Among ( "\u03BF\u03C5\u03BD\u03C4\u03B1\u03BD", 40, 1 ),
        new Among ( "\u03B9\u03BF\u03C5\u03BD\u03C4\u03B1\u03BD", 50, 1 ),
        new Among ( "\u03BF\u03C4\u03B1\u03BD", 40, 1 ),
        new Among ( "\u03B9\u03BF\u03C4\u03B1\u03BD", 52, 1 ),
        new Among ( "\u03BF\u03BC\u03B1\u03C3\u03C4\u03B1\u03BD", 40, 1 ),
        new Among ( "\u03B9\u03BF\u03BC\u03B1\u03C3\u03C4\u03B1\u03BD", 54, 1 ),
        new Among ( "\u03BF\u03C3\u03B1\u03C3\u03C4\u03B1\u03BD", 40, 1 ),
        new Among ( "\u03B9\u03BF\u03C3\u03B1\u03C3\u03C4\u03B1\u03BD", 56, 1 ),
        new Among ( "\u03BF\u03C5\u03BD", -1, 1 ),
        new Among ( "\u03B7\u03B8\u03BF\u03C5\u03BD", 58, 1 ),
        new Among ( "\u03BF\u03BC\u03BF\u03C5\u03BD", 58, 1 ),
        new Among ( "\u03B9\u03BF\u03BC\u03BF\u03C5\u03BD", 60, 1 ),
        new Among ( "\u03B7\u03C3\u03BF\u03C5\u03BD", 58, 1 ),
        new Among ( "\u03BF\u03C3\u03BF\u03C5\u03BD", 58, 1 ),
        new Among ( "\u03B9\u03BF\u03C3\u03BF\u03C5\u03BD", 63, 1 ),
        new Among ( "\u03C9\u03BD", -1, 1 ),
        new Among ( "\u03B7\u03B4\u03C9\u03BD", 65, 1 ),
        new Among ( "\u03BF", -1, 1 ),
        new Among ( "\u03B1\u03C3", -1, 1 ),
        new Among ( "\u03B5\u03C3", -1, 1 ),
        new Among ( "\u03B7\u03B4\u03B5\u03C3", 69, 1 ),
        new Among ( "\u03B7\u03C3\u03B5\u03C3", 69, 1 ),
        new Among ( "\u03B7\u03C3", -1, 1 ),
        new Among ( "\u03B5\u03B9\u03C3", -1, 1 ),
        new Among ( "\u03B7\u03B8\u03B5\u03B9\u03C3", 73, 1 ),
        new Among ( "\u03BF\u03C3", -1, 1 ),
        new Among ( "\u03C5\u03C3", -1, 1 ),
        new Among ( "\u03BF\u03C5\u03C3", 76, 1 ),
        new Among ( "\u03C5", -1, 1 ),
        new Among ( "\u03BF\u03C5", 78, 1 ),
        new Among ( "\u03C9", -1, 1 ),
        new Among ( "\u03B1\u03C9", 80, 1 ),
        new Among ( "\u03B7\u03B8\u03C9", 80, 1 ),
        new Among ( "\u03B7\u03C3\u03C9", 80, 1 )
    };

    private final static Among a_46[] = {
        new Among ( "\u03BF\u03C4\u03B5\u03C1", -1, 1 ),
        new Among ( "\u03B5\u03C3\u03C4\u03B5\u03C1", -1, 1 ),
        new Among ( "\u03C5\u03C4\u03B5\u03C1", -1, 1 ),
        new Among ( "\u03C9\u03C4\u03B5\u03C1", -1, 1 ),
        new Among ( "\u03BF\u03C4\u03B1\u03C4", -1, 1 ),
        new Among ( "\u03B5\u03C3\u03C4\u03B1\u03C4", -1, 1 ),
        new Among ( "\u03C5\u03C4\u03B1\u03C4", -1, 1 ),
        new Among ( "\u03C9\u03C4\u03B1\u03C4", -1, 1 )
    };

    private static final char g_v[] = {81, 65, 16, 1 };

    private static final char g_v2[] = {81, 65, 0, 1 };

    private java.lang.StringBuilder S_s = new java.lang.StringBuilder();
    private boolean B_test1;


    private boolean r_tolower() {
        int among_var;
        int v_1;
        // (, line 104
        // repeat, line 105
        replab0: while(true)
        {
            v_1 = limit - cursor;
            lab1: do {
                // (, line 105
                // [, line 106
                ket = cursor;
                // substring, line 106
                among_var = find_among_b(a_0);
                if (among_var == 0)
                {
                    break lab1;
                }
                // ], line 106
                bra = cursor;
                switch (among_var) {
                    case 0:
                        break lab1;
                    case 1:
                        // (, line 107
                        // <-, line 107
                        slice_from("\u03B1");
                        break;
                    case 2:
                        // (, line 108
                        // <-, line 108
                        slice_from("\u03B2");
                        break;
                    case 3:
                        // (, line 109
                        // <-, line 109
                        slice_from("\u03B3");
                        break;
                    case 4:
                        // (, line 110
                        // <-, line 110
                        slice_from("\u03B4");
                        break;
                    case 5:
                        // (, line 111
                        // <-, line 111
                        slice_from("\u03B5");
                        break;
                    case 6:
                        // (, line 112
                        // <-, line 112
                        slice_from("\u03B6");
                        break;
                    case 7:
                        // (, line 113
                        // <-, line 113
                        slice_from("\u03B7");
                        break;
                    case 8:
                        // (, line 114
                        // <-, line 114
                        slice_from("\u03B8");
                        break;
                    case 9:
                        // (, line 115
                        // <-, line 115
                        slice_from("\u03B9");
                        break;
                    case 10:
                        // (, line 116
                        // <-, line 116
                        slice_from("\u03BA");
                        break;
                    case 11:
                        // (, line 117
                        // <-, line 117
                        slice_from("\u03BB");
                        break;
                    case 12:
                        // (, line 118
                        // <-, line 118
                        slice_from("\u03BC");
                        break;
                    case 13:
                        // (, line 119
                        // <-, line 119
                        slice_from("\u03BD");
                        break;
                    case 14:
                        // (, line 120
                        // <-, line 120
                        slice_from("\u03BE");
                        break;
                    case 15:
                        // (, line 121
                        // <-, line 121
                        slice_from("\u03BF");
                        break;
                    case 16:
                        // (, line 122
                        // <-, line 122
                        slice_from("\u03C0");
                        break;
                    case 17:
                        // (, line 123
                        // <-, line 123
                        slice_from("\u03C1");
                        break;
                    case 18:
                        // (, line 124
                        // <-, line 124
                        slice_from("\u03C3");
                        break;
                    case 19:
                        // (, line 125
                        // <-, line 125
                        slice_from("\u03C4");
                        break;
                    case 20:
                        // (, line 126
                        // <-, line 126
                        slice_from("\u03C5");
                        break;
                    case 21:
                        // (, line 127
                        // <-, line 127
                        slice_from("\u03C6");
                        break;
                    case 22:
                        // (, line 128
                        // <-, line 128
                        slice_from("\u03C7");
                        break;
                    case 23:
                        // (, line 129
                        // <-, line 129
                        slice_from("\u03C8");
                        break;
                    case 24:
                        // (, line 130
                        // <-, line 130
                        slice_from("\u03C9");
                        break;
                    case 25:
                        // (, line 131
                        // <-, line 131
                        slice_from("\u03B9");
                        break;
                    case 26:
                        // (, line 132
                        // <-, line 132
                        slice_from("\u03C5");
                        break;
                    case 27:
                        // (, line 133
                        // <-, line 133
                        slice_from("\u03B1");
                        break;
                    case 28:
                        // (, line 134
                        // <-, line 134
                        slice_from("\u03B5");
                        break;
                    case 29:
                        // (, line 135
                        // <-, line 135
                        slice_from("\u03B7");
                        break;
                    case 30:
                        // (, line 136
                        // <-, line 136
                        slice_from("\u03B9");
                        break;
                    case 31:
                        // (, line 137
                        // <-, line 137
                        slice_from("\u03BF");
                        break;
                    case 32:
                        // (, line 138
                        // <-, line 138
                        slice_from("\u03C5");
                        break;
                    case 33:
                        // (, line 139
                        // <-, line 139
                        slice_from("\u03C9");
                        break;
                    case 34:
                        // (, line 140
                        // <-, line 140
                        slice_from("\u03B7");
                        break;
                    case 35:
                        // (, line 141
                        // <-, line 141
                        slice_from("\u03C5");
                        break;
                    case 36:
                        // (, line 142
                        // <-, line 142
                        slice_from("\u03B7");
                        break;
                    case 37:
                        // (, line 143
                        // <-, line 143
                        slice_from("\u03C5");
                        break;
                    case 38:
                        // (, line 144
                        // <-, line 144
                        slice_from("\u03B1");
                        break;
                    case 39:
                        // (, line 145
                        // <-, line 145
                        slice_from("\u03B5");
                        break;
                    case 40:
                        // (, line 146
                        // <-, line 146
                        slice_from("\u03B7");
                        break;
                    case 41:
                        // (, line 147
                        // <-, line 147
                        slice_from("\u03B9");
                        break;
                    case 42:
                        // (, line 148
                        // <-, line 148
                        slice_from("\u03BF");
                        break;
                    case 43:
                        // (, line 149
                        // <-, line 149
                        slice_from("\u03C5");
                        break;
                    case 44:
                        // (, line 150
                        // <-, line 150
                        slice_from("\u03C9");
                        break;
                }
                continue replab0;
            } while (false);
            cursor = limit - v_1;
            break replab0;
        }
        return true;
    }

    private boolean r_step1() {
        int among_var;
        int v_1;
        // (, line 155
        // [, line 156
        ket = cursor;
        // substring, line 156
        among_var = find_among_b(a_1);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 156
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 157
                // <-, line 157
                slice_from("\u03C6\u03B1");
                break;
            case 2:
                // (, line 158
                // <-, line 158
                slice_from("\u03C3\u03BA\u03B1");
                break;
            case 3:
                // (, line 159
                // <-, line 159
                slice_from("\u03BF\u03BB\u03BF");
                break;
            case 4:
                // (, line 160
                // <-, line 160
                slice_from("\u03C3\u03BF");
                break;
            case 5:
                // (, line 161
                // <-, line 161
                slice_from("\u03C4\u03B1\u03C4\u03BF");
                break;
            case 6:
                // (, line 162
                // <-, line 162
                slice_from("\u03BA\u03C1\u03B5");
                break;
            case 7:
                // (, line 163
                // <-, line 163
                slice_from("\u03C0\u03B5\u03C1");
                break;
            case 8:
                // (, line 164
                // <-, line 164
                slice_from("\u03C4\u03B5\u03C1");
                break;
            case 9:
                // (, line 165
                // <-, line 165
                slice_from("\u03C6\u03C9");
                break;
            case 10:
                // (, line 166
                // <-, line 166
                slice_from("\u03BA\u03B1\u03B8\u03B5\u03C3\u03C4");
                break;
            case 11:
                // (, line 167
                // <-, line 167
                slice_from("\u03B3\u03B5\u03B3\u03BF\u03BD");
                break;
        }
        // do, line 169
        v_1 = limit - cursor;
        lab0: do {
            // unset test1, line 169
            B_test1 = false;
        } while (false);
        cursor = limit - v_1;
        return true;
    }

    private boolean r_step2a() {
        int among_var;
        int v_1;
        // (, line 172
        // [, line 173
        ket = cursor;
        // substring, line 173
        among_var = find_among_b(a_2);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 173
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 174
                // delete, line 174
                slice_del();
                break;
        }
        // not, line 176
        {
            v_1 = limit - cursor;
            lab0: do {
                // (, line 176
                // [, line 176
                ket = cursor;
                // substring, line 176
                if (find_among_b(a_3) == 0)
                {
                    break lab0;
                }
                // ], line 176
                bra = cursor;
                return false;
            } while (false);
            cursor = limit - v_1;
        }
        // <+, line 179
        {
            int c = cursor;
            insert(cursor, cursor, "\u03B1\u03B4");
            cursor = c;
        }
        return true;
    }

    private boolean r_step2b() {
        int among_var;
        // (, line 182
        // [, line 183
        ket = cursor;
        // substring, line 183
        among_var = find_among_b(a_4);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 183
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 184
                // delete, line 184
                slice_del();
                break;
        }
        // [, line 186
        ket = cursor;
        // substring, line 186
        among_var = find_among_b(a_5);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 186
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 187
                // -> s, line 187
                S_s = slice_to(S_s);
                // <-, line 187
                slice_from("\u03B5\u03B4");
                // <+ s, line 187
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step2c() {
        int among_var;
        // (, line 191
        // [, line 192
        ket = cursor;
        // substring, line 192
        among_var = find_among_b(a_6);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 192
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 193
                // delete, line 193
                slice_del();
                break;
        }
        // [, line 195
        ket = cursor;
        // substring, line 195
        among_var = find_among_b(a_7);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 195
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 197
                // -> s, line 197
                S_s = slice_to(S_s);
                // <-, line 197
                slice_from("\u03BF\u03C5\u03B4");
                // <+ s, line 197
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step2d() {
        int among_var;
        int v_1;
        // (, line 201
        // [, line 202
        ket = cursor;
        // substring, line 202
        among_var = find_among_b(a_8);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 202
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 203
                // delete, line 203
                slice_del();
                // do, line 203
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 203
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                break;
        }
        // [, line 205
        ket = cursor;
        // substring, line 205
        among_var = find_among_b(a_9);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 205
        bra = cursor;
        // atlimit, line 205
        if (cursor > limit_backward)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 206
                // -> s, line 206
                S_s = slice_to(S_s);
                // <-, line 206
                slice_from("\u03B5");
                // <+ s, line 206
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step3() {
        int among_var;
        int v_1;
        // (, line 210
        // [, line 211
        ket = cursor;
        // substring, line 211
        among_var = find_among_b(a_10);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 211
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 212
                // delete, line 212
                slice_del();
                // do, line 212
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 212
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                break;
        }
        // (, line 214
        // [, line 214
        ket = cursor;
        if (!(in_grouping_b(g_v, 945, 969)))
        {
            return false;
        }
        // ], line 214
        bra = cursor;
        // -> s, line 214
        S_s = slice_to(S_s);
        // <-, line 214
        slice_from("\u03B9");
        // <+ s, line 214
        {
            int c = cursor;
            insert(cursor, cursor, S_s);
            cursor = c;
        }
        return true;
    }

    private boolean r_step4() {
        int among_var;
        int v_1;
        int v_2;
        // (, line 217
        // [, line 218
        ket = cursor;
        // substring, line 218
        among_var = find_among_b(a_11);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 218
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 219
                // delete, line 219
                slice_del();
                // do, line 219
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 219
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                break;
        }
        // or, line 221
        lab1: do {
            v_2 = limit - cursor;
            lab2: do {
                // (, line 221
                // [, line 221
                ket = cursor;
                if (!(in_grouping_b(g_v, 945, 969)))
                {
                    break lab2;
                }
                // ], line 221
                bra = cursor;
                // -> s, line 221
                S_s = slice_to(S_s);
                // <-, line 221
                slice_from("\u03B9\u03BA");
                // <+ s, line 221
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break lab1;
            } while (false);
            cursor = limit - v_2;
            // [, line 222
            ket = cursor;
        } while (false);
        // substring, line 222
        among_var = find_among_b(a_12);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 222
        bra = cursor;
        // atlimit, line 222
        if (cursor > limit_backward)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 227
                // -> s, line 227
                S_s = slice_to(S_s);
                // <-, line 227
                slice_from("\u03B9\u03BA");
                // <+ s, line 227
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step5a() {
        int among_var;
        int v_1;
        int v_2;
        int v_3;
        int v_4;
        // (, line 231
        // do, line 232
        v_1 = limit - cursor;
        lab0: do {
            // (, line 232
            // literal, line 232
            if (!(eq_s_b("\u03B1\u03B3\u03B1\u03BC\u03B5")))
            {
                break lab0;
            }
            // atlimit, line 232
            if (cursor > limit_backward)
            {
                break lab0;
            }
            // <-, line 232
            slice_from("\u03B1\u03B3\u03B1\u03BC");
        } while (false);
        cursor = limit - v_1;
        // do, line 233
        v_2 = limit - cursor;
        lab1: do {
            // (, line 233
            // [, line 234
            ket = cursor;
            // substring, line 234
            among_var = find_among_b(a_13);
            if (among_var == 0)
            {
                break lab1;
            }
            // ], line 234
            bra = cursor;
            switch (among_var) {
                case 0:
                    break lab1;
                case 1:
                    // (, line 235
                    // delete, line 235
                    slice_del();
                    // do, line 235
                    v_3 = limit - cursor;
                    lab2: do {
                        // unset test1, line 235
                        B_test1 = false;
                    } while (false);
                    cursor = limit - v_3;
                    break;
            }
        } while (false);
        cursor = limit - v_2;
        // [, line 238
        ket = cursor;
        // literal, line 238
        if (!(eq_s_b("\u03B1\u03BC\u03B5")))
        {
            return false;
        }
        // ], line 238
        bra = cursor;
        // delete, line 239
        slice_del();
        // do, line 240
        v_4 = limit - cursor;
        lab3: do {
            // unset test1, line 240
            B_test1 = false;
        } while (false);
        cursor = limit - v_4;
        // [, line 241
        ket = cursor;
        // substring, line 241
        among_var = find_among_b(a_14);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 241
        bra = cursor;
        // atlimit, line 241
        if (cursor > limit_backward)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 243
                // -> s, line 243
                S_s = slice_to(S_s);
                // <-, line 243
                slice_from("\u03B1\u03BC");
                // <+ s, line 243
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step5b() {
        int among_var;
        int v_1;
        int v_2;
        int v_3;
        int v_4;
        // (, line 247
        // do, line 248
        v_1 = limit - cursor;
        lab0: do {
            // (, line 248
            // [, line 249
            ket = cursor;
            // substring, line 249
            among_var = find_among_b(a_16);
            if (among_var == 0)
            {
                break lab0;
            }
            // ], line 249
            bra = cursor;
            switch (among_var) {
                case 0:
                    break lab0;
                case 1:
                    // (, line 251
                    // delete, line 252
                    slice_del();
                    // do, line 253
                    v_2 = limit - cursor;
                    lab1: do {
                        // unset test1, line 253
                        B_test1 = false;
                    } while (false);
                    cursor = limit - v_2;
                    // [, line 254
                    ket = cursor;
                    // substring, line 254
                    among_var = find_among_b(a_15);
                    if (among_var == 0)
                    {
                        break lab0;
                    }
                    // ], line 254
                    bra = cursor;
                    // atlimit, line 254
                    if (cursor > limit_backward)
                    {
                        break lab0;
                    }
                    switch (among_var) {
                        case 0:
                            break lab0;
                        case 1:
                            // (, line 255
                            // -> s, line 255
                            S_s = slice_to(S_s);
                            // <-, line 255
                            slice_from("\u03B1\u03B3\u03B1\u03BD");
                            // <+ s, line 255
                            {
                                int c = cursor;
                                insert(cursor, cursor, S_s);
                                cursor = c;
                            }
                            break;
                    }
                    break;
            }
        } while (false);
        cursor = limit - v_1;
        // [, line 260
        ket = cursor;
        // literal, line 260
        if (!(eq_s_b("\u03B1\u03BD\u03B5")))
        {
            return false;
        }
        // ], line 260
        bra = cursor;
        // delete, line 261
        slice_del();
        // do, line 262
        v_3 = limit - cursor;
        lab2: do {
            // unset test1, line 262
            B_test1 = false;
        } while (false);
        cursor = limit - v_3;
        // or, line 263
        lab3: do {
            v_4 = limit - cursor;
            lab4: do {
                // (, line 263
                // [, line 263
                ket = cursor;
                if (!(in_grouping_b(g_v2, 945, 969)))
                {
                    break lab4;
                }
                // ], line 263
                bra = cursor;
                // -> s, line 263
                S_s = slice_to(S_s);
                // <-, line 263
                slice_from("\u03B1\u03BD");
                // <+ s, line 263
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break lab3;
            } while (false);
            cursor = limit - v_4;
            // [, line 264
            ket = cursor;
        } while (false);
        // substring, line 264
        among_var = find_among_b(a_17);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 264
        bra = cursor;
        // atlimit, line 264
        if (cursor > limit_backward)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 281
                // -> s, line 281
                S_s = slice_to(S_s);
                // <-, line 281
                slice_from("\u03B1\u03BD");
                // <+ s, line 281
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step5c() {
        int among_var;
        int v_1;
        int v_2;
        int v_3;
        int v_4;
        // (, line 285
        // do, line 286
        v_1 = limit - cursor;
        lab0: do {
            // (, line 286
            // [, line 287
            ket = cursor;
            // substring, line 287
            among_var = find_among_b(a_18);
            if (among_var == 0)
            {
                break lab0;
            }
            // ], line 287
            bra = cursor;
            switch (among_var) {
                case 0:
                    break lab0;
                case 1:
                    // (, line 288
                    // delete, line 288
                    slice_del();
                    // do, line 288
                    v_2 = limit - cursor;
                    lab1: do {
                        // unset test1, line 288
                        B_test1 = false;
                    } while (false);
                    cursor = limit - v_2;
                    break;
            }
        } while (false);
        cursor = limit - v_1;
        // [, line 291
        ket = cursor;
        // literal, line 291
        if (!(eq_s_b("\u03B5\u03C4\u03B5")))
        {
            return false;
        }
        // ], line 291
        bra = cursor;
        // delete, line 292
        slice_del();
        // do, line 293
        v_3 = limit - cursor;
        lab2: do {
            // unset test1, line 293
            B_test1 = false;
        } while (false);
        cursor = limit - v_3;
        // or, line 294
        lab3: do {
            v_4 = limit - cursor;
            lab4: do {
                // (, line 294
                // [, line 294
                ket = cursor;
                if (!(in_grouping_b(g_v2, 945, 969)))
                {
                    break lab4;
                }
                // ], line 294
                bra = cursor;
                // -> s, line 294
                S_s = slice_to(S_s);
                // <-, line 294
                slice_from("\u03B5\u03C4");
                // <+ s, line 294
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break lab3;
            } while (false);
            cursor = limit - v_4;
            lab5: do {
                // (, line 295
                // [, line 295
                ket = cursor;
                // substring, line 295
                among_var = find_among_b(a_19);
                if (among_var == 0)
                {
                    break lab5;
                }
                // ], line 295
                bra = cursor;
                switch (among_var) {
                    case 0:
                        break lab5;
                    case 1:
                        // (, line 299
                        // -> s, line 299
                        S_s = slice_to(S_s);
                        // <-, line 299
                        slice_from("\u03B5\u03C4");
                        // <+ s, line 299
                        {
                            int c = cursor;
                            insert(cursor, cursor, S_s);
                            cursor = c;
                        }
                        break;
                }
                break lab3;
            } while (false);
            cursor = limit - v_4;
            // [, line 301
            ket = cursor;
        } while (false);
        // substring, line 301
        among_var = find_among_b(a_20);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 301
        bra = cursor;
        // atlimit, line 301
        if (cursor > limit_backward)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 305
                // -> s, line 305
                S_s = slice_to(S_s);
                // <-, line 305
                slice_from("\u03B5\u03C4");
                // <+ s, line 305
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step5d() {
        int among_var;
        int v_1;
        int v_2;
        // (, line 309
        // [, line 310
        ket = cursor;
        // substring, line 310
        among_var = find_among_b(a_21);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 310
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 311
                // delete, line 312
                slice_del();
                // do, line 313
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 313
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                // or, line 314
                lab1: do {
                    v_2 = limit - cursor;
                    lab2: do {
                        // (, line 314
                        // [, line 314
                        ket = cursor;
                        // literal, line 314
                        if (!(eq_s_b("\u03B1\u03C1\u03C7")))
                        {
                            break lab2;
                        }
                        // ], line 314
                        bra = cursor;
                        // atlimit, line 314
                        if (cursor > limit_backward)
                        {
                            break lab2;
                        }
                        // -> s, line 314
                        S_s = slice_to(S_s);
                        // <-, line 314
                        slice_from("\u03BF\u03BD\u03C4");
                        // <+ s, line 314
                        {
                            int c = cursor;
                            insert(cursor, cursor, S_s);
                            cursor = c;
                        }
                        break lab1;
                    } while (false);
                    cursor = limit - v_2;
                    // (, line 315
                    // [, line 315
                    ket = cursor;
                    // literal, line 315
                    if (!(eq_s_b("\u03BA\u03C1\u03B5")))
                    {
                        return false;
                    }
                    // ], line 315
                    bra = cursor;
                    // -> s, line 315
                    S_s = slice_to(S_s);
                    // <-, line 315
                    slice_from("\u03C9\u03BD\u03C4");
                    // <+ s, line 315
                    {
                        int c = cursor;
                        insert(cursor, cursor, S_s);
                        cursor = c;
                    }
                } while (false);
                break;
        }
        return true;
    }

    private boolean r_step5e() {
        int among_var;
        int v_1;
        // (, line 320
        // [, line 321
        ket = cursor;
        // substring, line 321
        among_var = find_among_b(a_22);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 321
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 322
                // delete, line 323
                slice_del();
                // do, line 324
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 324
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                // (, line 325
                // [, line 325
                ket = cursor;
                // literal, line 325
                if (!(eq_s_b("\u03BF\u03BD")))
                {
                    return false;
                }
                // ], line 325
                bra = cursor;
                // atlimit, line 325
                if (cursor > limit_backward)
                {
                    return false;
                }
                // -> s, line 325
                S_s = slice_to(S_s);
                // <-, line 325
                slice_from("\u03BF\u03BC\u03B1\u03C3\u03C4");
                // <+ s, line 325
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step5f() {
        int among_var;
        int v_1;
        int v_2;
        int v_3;
        // (, line 330
        // do, line 331
        v_1 = limit - cursor;
        lab0: do {
            // (, line 331
            // [, line 332
            ket = cursor;
            // literal, line 332
            if (!(eq_s_b("\u03B9\u03B5\u03C3\u03C4\u03B5")))
            {
                break lab0;
            }
            // ], line 332
            bra = cursor;
            // delete, line 333
            slice_del();
            // do, line 334
            v_2 = limit - cursor;
            lab1: do {
                // unset test1, line 334
                B_test1 = false;
            } while (false);
            cursor = limit - v_2;
            // [, line 335
            ket = cursor;
            // substring, line 335
            among_var = find_among_b(a_23);
            if (among_var == 0)
            {
                break lab0;
            }
            // ], line 335
            bra = cursor;
            // atlimit, line 335
            if (cursor > limit_backward)
            {
                break lab0;
            }
            switch (among_var) {
                case 0:
                    break lab0;
                case 1:
                    // (, line 336
                    // -> s, line 336
                    S_s = slice_to(S_s);
                    // <-, line 336
                    slice_from("\u03B9\u03B5\u03C3\u03C4");
                    // <+ s, line 336
                    {
                        int c = cursor;
                        insert(cursor, cursor, S_s);
                        cursor = c;
                    }
                    break;
            }
        } while (false);
        cursor = limit - v_1;
        // [, line 339
        ket = cursor;
        // literal, line 339
        if (!(eq_s_b("\u03B5\u03C3\u03C4\u03B5")))
        {
            return false;
        }
        // ], line 339
        bra = cursor;
        // delete, line 340
        slice_del();
        // do, line 341
        v_3 = limit - cursor;
        lab2: do {
            // unset test1, line 341
            B_test1 = false;
        } while (false);
        cursor = limit - v_3;
        // [, line 342
        ket = cursor;
        // substring, line 342
        among_var = find_among_b(a_24);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 342
        bra = cursor;
        // atlimit, line 342
        if (cursor > limit_backward)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 344
                // -> s, line 344
                S_s = slice_to(S_s);
                // <-, line 344
                slice_from("\u03B9\u03B5\u03C3\u03C4");
                // <+ s, line 344
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step5g() {
        int among_var;
        int v_1;
        int v_2;
        int v_3;
        int v_4;
        // (, line 348
        // do, line 349
        v_1 = limit - cursor;
        lab0: do {
            // (, line 349
            // [, line 350
            ket = cursor;
            // substring, line 350
            among_var = find_among_b(a_25);
            if (among_var == 0)
            {
                break lab0;
            }
            // ], line 350
            bra = cursor;
            switch (among_var) {
                case 0:
                    break lab0;
                case 1:
                    // (, line 351
                    // delete, line 351
                    slice_del();
                    // do, line 351
                    v_2 = limit - cursor;
                    lab1: do {
                        // unset test1, line 351
                        B_test1 = false;
                    } while (false);
                    cursor = limit - v_2;
                    break;
            }
        } while (false);
        cursor = limit - v_1;
        // [, line 354
        ket = cursor;
        // substring, line 354
        among_var = find_among_b(a_28);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 354
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 355
                // delete, line 356
                slice_del();
                // do, line 357
                v_3 = limit - cursor;
                lab2: do {
                    // unset test1, line 357
                    B_test1 = false;
                } while (false);
                cursor = limit - v_3;
                // or, line 360
                lab3: do {
                    v_4 = limit - cursor;
                    lab4: do {
                        // (, line 358
                        // [, line 358
                        ket = cursor;
                        // substring, line 358
                        among_var = find_among_b(a_26);
                        if (among_var == 0)
                        {
                            break lab4;
                        }
                        // ], line 358
                        bra = cursor;
                        switch (among_var) {
                            case 0:
                                break lab4;
                            case 1:
                                // (, line 359
                                // -> s, line 359
                                S_s = slice_to(S_s);
                                // <-, line 359
                                slice_from("\u03B7\u03BA");
                                // <+ s, line 359
                                {
                                    int c = cursor;
                                    insert(cursor, cursor, S_s);
                                    cursor = c;
                                }
                                break;
                        }
                        break lab3;
                    } while (false);
                    cursor = limit - v_4;
                    // (, line 361
                    // [, line 361
                    ket = cursor;
                    // substring, line 361
                    among_var = find_among_b(a_27);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // ], line 361
                    bra = cursor;
                    // atlimit, line 361
                    if (cursor > limit_backward)
                    {
                        return false;
                    }
                    switch (among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 362
                            // -> s, line 362
                            S_s = slice_to(S_s);
                            // <-, line 362
                            slice_from("\u03B7\u03BA");
                            // <+ s, line 362
                            {
                                int c = cursor;
                                insert(cursor, cursor, S_s);
                                cursor = c;
                            }
                            break;
                    }
                } while (false);
                break;
        }
        return true;
    }

    private boolean r_step5h() {
        int among_var;
        int v_1;
        int v_2;
        // (, line 368
        // [, line 369
        ket = cursor;
        // substring, line 369
        among_var = find_among_b(a_31);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 369
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 370
                // delete, line 371
                slice_del();
                // do, line 372
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 372
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                // or, line 377
                lab1: do {
                    v_2 = limit - cursor;
                    lab2: do {
                        // (, line 373
                        // [, line 373
                        ket = cursor;
                        // substring, line 373
                        among_var = find_among_b(a_29);
                        if (among_var == 0)
                        {
                            break lab2;
                        }
                        // ], line 373
                        bra = cursor;
                        switch (among_var) {
                            case 0:
                                break lab2;
                            case 1:
                                // (, line 375
                                // -> s, line 375
                                S_s = slice_to(S_s);
                                // <-, line 375
                                slice_from("\u03BF\u03C5\u03C3");
                                // <+ s, line 375
                                {
                                    int c = cursor;
                                    insert(cursor, cursor, S_s);
                                    cursor = c;
                                }
                                break;
                        }
                        break lab1;
                    } while (false);
                    cursor = limit - v_2;
                    // (, line 378
                    // [, line 378
                    ket = cursor;
                    // substring, line 378
                    among_var = find_among_b(a_30);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // ], line 378
                    bra = cursor;
                    // atlimit, line 378
                    if (cursor > limit_backward)
                    {
                        return false;
                    }
                    switch (among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 382
                            // -> s, line 382
                            S_s = slice_to(S_s);
                            // <-, line 382
                            slice_from("\u03BF\u03C5\u03C3");
                            // <+ s, line 382
                            {
                                int c = cursor;
                                insert(cursor, cursor, S_s);
                                cursor = c;
                            }
                            break;
                    }
                } while (false);
                break;
        }
        return true;
    }

    private boolean r_step5i() {
        int among_var;
        int v_1;
        int v_2;
        int v_3;
        int v_4;
        // (, line 388
        // [, line 389
        ket = cursor;
        // substring, line 389
        among_var = find_among_b(a_35);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 389
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 390
                // delete, line 391
                slice_del();
                // do, line 392
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 392
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                // or, line 393
                lab1: do {
                    v_2 = limit - cursor;
                    lab2: do {
                        // (, line 393
                        // [, line 393
                        ket = cursor;
                        // literal, line 393
                        if (!(eq_s_b("\u03BA\u03BF\u03BB\u03BB")))
                        {
                            break lab2;
                        }
                        // ], line 393
                        bra = cursor;
                        // -> s, line 393
                        S_s = slice_to(S_s);
                        // <-, line 393
                        slice_from("\u03B1\u03B3");
                        // <+ s, line 393
                        {
                            int c = cursor;
                            insert(cursor, cursor, S_s);
                            cursor = c;
                        }
                        break lab1;
                    } while (false);
                    cursor = limit - v_2;
                    // (, line 393
                    // not, line 394
                    {
                        v_3 = limit - cursor;
                        lab3: do {
                            // (, line 394
                            // [, line 394
                            ket = cursor;
                            // substring, line 394
                            if (find_among_b(a_32) == 0)
                            {
                                break lab3;
                            }
                            // ], line 394
                            bra = cursor;
                            return false;
                        } while (false);
                        cursor = limit - v_3;
                    }
                    // or, line 398
                    lab4: do {
                        v_4 = limit - cursor;
                        lab5: do {
                            // (, line 395
                            // [, line 395
                            ket = cursor;
                            // substring, line 395
                            among_var = find_among_b(a_33);
                            if (among_var == 0)
                            {
                                break lab5;
                            }
                            // ], line 395
                            bra = cursor;
                            switch (among_var) {
                                case 0:
                                    break lab5;
                                case 1:
                                    // (, line 397
                                    // -> s, line 397
                                    S_s = slice_to(S_s);
                                    // <-, line 397
                                    slice_from("\u03B1\u03B3");
                                    // <+ s, line 397
                                    {
                                        int c = cursor;
                                        insert(cursor, cursor, S_s);
                                        cursor = c;
                                    }
                                    break;
                            }
                            break lab4;
                        } while (false);
                        cursor = limit - v_4;
                        // (, line 399
                        // [, line 399
                        ket = cursor;
                        // substring, line 399
                        among_var = find_among_b(a_34);
                        if (among_var == 0)
                        {
                            return false;
                        }
                        // ], line 399
                        bra = cursor;
                        // atlimit, line 399
                        if (cursor > limit_backward)
                        {
                            return false;
                        }
                        switch (among_var) {
                            case 0:
                                return false;
                            case 1:
                                // (, line 405
                                // -> s, line 405
                                S_s = slice_to(S_s);
                                // <-, line 405
                                slice_from("\u03B1\u03B3");
                                // <+ s, line 405
                                {
                                    int c = cursor;
                                    insert(cursor, cursor, S_s);
                                    cursor = c;
                                }
                                break;
                        }
                    } while (false);
                } while (false);
                break;
        }
        return true;
    }

    private boolean r_step5j() {
        int among_var;
        int v_1;
        // (, line 412
        // [, line 413
        ket = cursor;
        // substring, line 413
        among_var = find_among_b(a_36);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 413
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 414
                // delete, line 414
                slice_del();
                // do, line 414
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 414
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                break;
        }
        // [, line 416
        ket = cursor;
        // substring, line 416
        among_var = find_among_b(a_37);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 416
        bra = cursor;
        // atlimit, line 416
        if (cursor > limit_backward)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 417
                // -> s, line 417
                S_s = slice_to(S_s);
                // <-, line 417
                slice_from("\u03B7\u03C3");
                // <+ s, line 417
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step5k() {
        int among_var;
        int v_1;
        // (, line 421
        // [, line 422
        ket = cursor;
        // substring, line 422
        among_var = find_among_b(a_38);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 422
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 423
                // delete, line 423
                slice_del();
                // do, line 423
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 423
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                break;
        }
        // [, line 425
        ket = cursor;
        // substring, line 425
        among_var = find_among_b(a_39);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 425
        bra = cursor;
        // atlimit, line 425
        if (cursor > limit_backward)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 427
                // -> s, line 427
                S_s = slice_to(S_s);
                // <-, line 427
                slice_from("\u03B7\u03C3\u03C4");
                // <+ s, line 427
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step5l() {
        int among_var;
        int v_1;
        // (, line 431
        // [, line 432
        ket = cursor;
        // substring, line 432
        among_var = find_among_b(a_40);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 432
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 433
                // delete, line 433
                slice_del();
                // do, line 433
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 433
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                break;
        }
        // [, line 435
        ket = cursor;
        // substring, line 435
        among_var = find_among_b(a_41);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 435
        bra = cursor;
        // atlimit, line 435
        if (cursor > limit_backward)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 436
                // -> s, line 436
                S_s = slice_to(S_s);
                // <-, line 436
                slice_from("\u03BF\u03C5\u03BD");
                // <+ s, line 436
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step5m() {
        int among_var;
        int v_1;
        // (, line 440
        // [, line 441
        ket = cursor;
        // substring, line 441
        among_var = find_among_b(a_42);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 441
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 442
                // delete, line 442
                slice_del();
                // do, line 442
                v_1 = limit - cursor;
                lab0: do {
                    // unset test1, line 442
                    B_test1 = false;
                } while (false);
                cursor = limit - v_1;
                break;
        }
        // [, line 444
        ket = cursor;
        // substring, line 444
        among_var = find_among_b(a_43);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 444
        bra = cursor;
        // atlimit, line 444
        if (cursor > limit_backward)
        {
            return false;
        }
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 446
                // -> s, line 446
                S_s = slice_to(S_s);
                // <-, line 446
                slice_from("\u03BF\u03C5\u03BC");
                // <+ s, line 446
                {
                    int c = cursor;
                    insert(cursor, cursor, S_s);
                    cursor = c;
                }
                break;
        }
        return true;
    }

    private boolean r_step6() {
        int among_var;
        int v_1;
        // (, line 450
        // do, line 451
        v_1 = limit - cursor;
        lab0: do {
            // (, line 451
            // [, line 452
            ket = cursor;
            // substring, line 452
            among_var = find_among_b(a_44);
            if (among_var == 0)
            {
                break lab0;
            }
            // ], line 452
            bra = cursor;
            switch (among_var) {
                case 0:
                    break lab0;
                case 1:
                    // (, line 453
                    // <-, line 453
                    slice_from("\u03BC\u03B1");
                    break;
            }
        } while (false);
        cursor = limit - v_1;
        // Boolean test test1, line 456
        if (!(B_test1))
        {
            return false;
        }
        // [, line 457
        ket = cursor;
        // substring, line 457
        among_var = find_among_b(a_45);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 457
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 467
                // delete, line 467
                slice_del();
                break;
        }
        return true;
    }

    private boolean r_step7() {
        int among_var;
        // (, line 471
        // [, line 472
        ket = cursor;
        // substring, line 472
        among_var = find_among_b(a_46);
        if (among_var == 0)
        {
            return false;
        }
        // ], line 472
        bra = cursor;
        switch (among_var) {
            case 0:
                return false;
            case 1:
                // (, line 473
                // delete, line 473
                slice_del();
                break;
        }
        return true;
    }

    public boolean stem() {
        int v_1;
        int v_2;
        int v_3;
        int v_4;
        int v_5;
        int v_6;
        int v_7;
        int v_8;
        int v_9;
        int v_10;
        int v_11;
        int v_12;
        int v_13;
        int v_14;
        int v_15;
        int v_16;
        int v_17;
        int v_18;
        int v_19;
        int v_20;
        int v_21;
        int v_22;
        int v_23;
        // (, line 478
        // backwards, line 479
        limit_backward = cursor; cursor = limit;
        // (, line 479
        // do, line 480
        v_1 = limit - cursor;
        lab0: do {
            // call tolower, line 480
            if (!r_tolower())
            {
                break lab0;
            }
        } while (false);
        cursor = limit - v_1;
        // set test1, line 481
        B_test1 = true;
        // do, line 482
        v_2 = limit - cursor;
        lab1: do {
            // call step1, line 482
            if (!r_step1())
            {
                break lab1;
            }
        } while (false);
        cursor = limit - v_2;
        // do, line 483
        v_3 = limit - cursor;
        lab2: do {
            // call step2a, line 483
            if (!r_step2a())
            {
                break lab2;
            }
        } while (false);
        cursor = limit - v_3;
        // do, line 484
        v_4 = limit - cursor;
        lab3: do {
            // call step2b, line 484
            if (!r_step2b())
            {
                break lab3;
            }
        } while (false);
        cursor = limit - v_4;
        // do, line 485
        v_5 = limit - cursor;
        lab4: do {
            // call step2c, line 485
            if (!r_step2c())
            {
                break lab4;
            }
        } while (false);
        cursor = limit - v_5;
        // do, line 486
        v_6 = limit - cursor;
        lab5: do {
            // call step2d, line 486
            if (!r_step2d())
            {
                break lab5;
            }
        } while (false);
        cursor = limit - v_6;
        // do, line 487
        v_7 = limit - cursor;
        lab6: do {
            // call step3, line 487
            if (!r_step3())
            {
                break lab6;
            }
        } while (false);
        cursor = limit - v_7;
        // do, line 488
        v_8 = limit - cursor;
        lab7: do {
            // call step4, line 488
            if (!r_step4())
            {
                break lab7;
            }
        } while (false);
        cursor = limit - v_8;
        // do, line 489
        v_9 = limit - cursor;
        lab8: do {
            // call step5a, line 489
            if (!r_step5a())
            {
                break lab8;
            }
        } while (false);
        cursor = limit - v_9;
        // do, line 490
        v_10 = limit - cursor;
        lab9: do {
            // call step5b, line 490
            if (!r_step5b())
            {
                break lab9;
            }
        } while (false);
        cursor = limit - v_10;
        // do, line 491
        v_11 = limit - cursor;
        lab10: do {
            // call step5c, line 491
            if (!r_step5c())
            {
                break lab10;
            }
        } while (false);
        cursor = limit - v_11;
        // do, line 492
        v_12 = limit - cursor;
        lab11: do {
            // call step5d, line 492
            if (!r_step5d())
            {
                break lab11;
            }
        } while (false);
        cursor = limit - v_12;
        // do, line 493
        v_13 = limit - cursor;
        lab12: do {
            // call step5e, line 493
            if (!r_step5e())
            {
                break lab12;
            }
        } while (false);
        cursor = limit - v_13;
        // do, line 494
        v_14 = limit - cursor;
        lab13: do {
            // call step5f, line 494
            if (!r_step5f())
            {
                break lab13;
            }
        } while (false);
        cursor = limit - v_14;
        // do, line 495
        v_15 = limit - cursor;
        lab14: do {
            // call step5g, line 495
            if (!r_step5g())
            {
                break lab14;
            }
        } while (false);
        cursor = limit - v_15;
        // do, line 496
        v_16 = limit - cursor;
        lab15: do {
            // call step5h, line 496
            if (!r_step5h())
            {
                break lab15;
            }
        } while (false);
        cursor = limit - v_16;
        // do, line 497
        v_17 = limit - cursor;
        lab16: do {
            // call step5j, line 497
            if (!r_step5j())
            {
                break lab16;
            }
        } while (false);
        cursor = limit - v_17;
        // do, line 498
        v_18 = limit - cursor;
        lab17: do {
            // call step5i, line 498
            if (!r_step5i())
            {
                break lab17;
            }
        } while (false);
        cursor = limit - v_18;
        // do, line 499
        v_19 = limit - cursor;
        lab18: do {
            // call step5k, line 499
            if (!r_step5k())
            {
                break lab18;
            }
        } while (false);
        cursor = limit - v_19;
        // do, line 500
        v_20 = limit - cursor;
        lab19: do {
            // call step5l, line 500
            if (!r_step5l())
            {
                break lab19;
            }
        } while (false);
        cursor = limit - v_20;
        // do, line 501
        v_21 = limit - cursor;
        lab20: do {
            // call step5m, line 501
            if (!r_step5m())
            {
                break lab20;
            }
        } while (false);
        cursor = limit - v_21;
        // do, line 502
        v_22 = limit - cursor;
        lab21: do {
            // call step6, line 502
            if (!r_step6())
            {
                break lab21;
            }
        } while (false);
        cursor = limit - v_22;
        // do, line 503
        v_23 = limit - cursor;
        lab22: do {
            // call step7, line 503
            if (!r_step7())
            {
                break lab22;
            }
        } while (false);
        cursor = limit - v_23;
        cursor = limit_backward;        return true;
    }

    public boolean equals( Object o ) {
        return o instanceof greekStemmer;
    }

    public int hashCode() {
        return greekStemmer.class.getName().hashCode();
    }



}

